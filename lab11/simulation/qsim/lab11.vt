// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2017 16:50:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_sample_tst(
	clock,
	IO_IN,
	reset,
	sampler_tx
);
input  clock;
input [31:0] IO_IN;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clock or IO_IN or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processor_vlg_check_tst (
	ALU_2_DBus,
	DBus,
	DM_2_DBus,
	DM_Rd,
	DM_Wr,
	IM_address,
	IM_instruction_out,
	instruction,
	IO_2_Reg,
	IO_OUT,
	IR_Ld,
	Pc_Inc,
	Pc_Ld,
	PC_Ld_En,
	Reg_2_IO,
	Reg_Wr,
	RSource1,
	RSource2,
	stat_CVNZ,
	Stat_Wr,
	sampler_rx
);
input  ALU_2_DBus;
input [31:0] DBus;
input  DM_2_DBus;
input  DM_Rd;
input  DM_Wr;
input [31:0] IM_address;
input [31:0] IM_instruction_out;
input [31:0] instruction;
input  IO_2_Reg;
input [31:0] IO_OUT;
input  IR_Ld;
input  Pc_Inc;
input  Pc_Ld;
input  PC_Ld_En;
input  Reg_2_IO;
input  Reg_Wr;
input [31:0] RSource1;
input [31:0] RSource2;
input [3:0] stat_CVNZ;
input  Stat_Wr;
input sampler_rx;

reg  ALU_2_DBus_expected;
reg [31:0] DBus_expected;
reg  DM_2_DBus_expected;
reg  DM_Rd_expected;
reg  DM_Wr_expected;
reg [31:0] IM_address_expected;
reg [31:0] IM_instruction_out_expected;
reg [31:0] instruction_expected;
reg  IO_2_Reg_expected;
reg [31:0] IO_OUT_expected;
reg  IR_Ld_expected;
reg  Pc_Inc_expected;
reg  Pc_Ld_expected;
reg  PC_Ld_En_expected;
reg  Reg_2_IO_expected;
reg  Reg_Wr_expected;
reg [31:0] RSource1_expected;
reg [31:0] RSource2_expected;
reg [3:0] stat_CVNZ_expected;
reg  Stat_Wr_expected;

reg  ALU_2_DBus_prev;
reg [31:0] DBus_prev;
reg  DM_2_DBus_prev;
reg  DM_Rd_prev;
reg  DM_Wr_prev;
reg [31:0] IM_address_prev;
reg [31:0] IM_instruction_out_prev;
reg [31:0] instruction_prev;
reg  IO_2_Reg_prev;
reg [31:0] IO_OUT_prev;
reg  IR_Ld_prev;
reg  Pc_Inc_prev;
reg  Pc_Ld_prev;
reg  PC_Ld_En_prev;
reg  Reg_2_IO_prev;
reg  Reg_Wr_prev;
reg [31:0] RSource1_prev;
reg [31:0] RSource2_prev;
reg [3:0] stat_CVNZ_prev;
reg  Stat_Wr_prev;

reg  ALU_2_DBus_expected_prev;
reg [31:0] DBus_expected_prev;
reg  DM_2_DBus_expected_prev;
reg  DM_Rd_expected_prev;
reg  DM_Wr_expected_prev;
reg [31:0] IM_address_expected_prev;
reg [31:0] IM_instruction_out_expected_prev;
reg [31:0] instruction_expected_prev;
reg  IO_2_Reg_expected_prev;
reg [31:0] IO_OUT_expected_prev;
reg  IR_Ld_expected_prev;
reg  Pc_Inc_expected_prev;
reg  Pc_Ld_expected_prev;
reg  PC_Ld_En_expected_prev;
reg  Reg_2_IO_expected_prev;
reg  Reg_Wr_expected_prev;
reg [31:0] RSource1_expected_prev;
reg [31:0] RSource2_expected_prev;
reg [3:0] stat_CVNZ_expected_prev;
reg  Stat_Wr_expected_prev;

reg  last_ALU_2_DBus_exp;
reg [31:0] last_DBus_exp;
reg  last_DM_2_DBus_exp;
reg  last_DM_Rd_exp;
reg  last_DM_Wr_exp;
reg [31:0] last_IM_address_exp;
reg [31:0] last_IM_instruction_out_exp;
reg [31:0] last_instruction_exp;
reg  last_IO_2_Reg_exp;
reg [31:0] last_IO_OUT_exp;
reg  last_IR_Ld_exp;
reg  last_Pc_Inc_exp;
reg  last_Pc_Ld_exp;
reg  last_PC_Ld_En_exp;
reg  last_Reg_2_IO_exp;
reg  last_Reg_Wr_exp;
reg [31:0] last_RSource1_exp;
reg [31:0] last_RSource2_exp;
reg [3:0] last_stat_CVNZ_exp;
reg  last_Stat_Wr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:20] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 20'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_2_DBus_prev = ALU_2_DBus;
	DBus_prev = DBus;
	DM_2_DBus_prev = DM_2_DBus;
	DM_Rd_prev = DM_Rd;
	DM_Wr_prev = DM_Wr;
	IM_address_prev = IM_address;
	IM_instruction_out_prev = IM_instruction_out;
	instruction_prev = instruction;
	IO_2_Reg_prev = IO_2_Reg;
	IO_OUT_prev = IO_OUT;
	IR_Ld_prev = IR_Ld;
	Pc_Inc_prev = Pc_Inc;
	Pc_Ld_prev = Pc_Ld;
	PC_Ld_En_prev = PC_Ld_En;
	Reg_2_IO_prev = Reg_2_IO;
	Reg_Wr_prev = Reg_Wr;
	RSource1_prev = RSource1;
	RSource2_prev = RSource2;
	stat_CVNZ_prev = stat_CVNZ;
	Stat_Wr_prev = Stat_Wr;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_2_DBus_expected_prev = ALU_2_DBus_expected;
	DBus_expected_prev = DBus_expected;
	DM_2_DBus_expected_prev = DM_2_DBus_expected;
	DM_Rd_expected_prev = DM_Rd_expected;
	DM_Wr_expected_prev = DM_Wr_expected;
	IM_address_expected_prev = IM_address_expected;
	IM_instruction_out_expected_prev = IM_instruction_out_expected;
	instruction_expected_prev = instruction_expected;
	IO_2_Reg_expected_prev = IO_2_Reg_expected;
	IO_OUT_expected_prev = IO_OUT_expected;
	IR_Ld_expected_prev = IR_Ld_expected;
	Pc_Inc_expected_prev = Pc_Inc_expected;
	Pc_Ld_expected_prev = Pc_Ld_expected;
	PC_Ld_En_expected_prev = PC_Ld_En_expected;
	Reg_2_IO_expected_prev = Reg_2_IO_expected;
	Reg_Wr_expected_prev = Reg_Wr_expected;
	RSource1_expected_prev = RSource1_expected;
	RSource2_expected_prev = RSource2_expected;
	stat_CVNZ_expected_prev = stat_CVNZ_expected;
	Stat_Wr_expected_prev = Stat_Wr_expected;
end


// expected DBus[ 31 ]
initial
begin
	DBus_expected[31] = 1'bX;
end 
// expected DBus[ 30 ]
initial
begin
	DBus_expected[30] = 1'bX;
end 
// expected DBus[ 29 ]
initial
begin
	DBus_expected[29] = 1'bX;
end 
// expected DBus[ 28 ]
initial
begin
	DBus_expected[28] = 1'bX;
end 
// expected DBus[ 27 ]
initial
begin
	DBus_expected[27] = 1'bX;
end 
// expected DBus[ 26 ]
initial
begin
	DBus_expected[26] = 1'bX;
end 
// expected DBus[ 25 ]
initial
begin
	DBus_expected[25] = 1'bX;
end 
// expected DBus[ 24 ]
initial
begin
	DBus_expected[24] = 1'bX;
end 
// expected DBus[ 23 ]
initial
begin
	DBus_expected[23] = 1'bX;
end 
// expected DBus[ 22 ]
initial
begin
	DBus_expected[22] = 1'bX;
end 
// expected DBus[ 21 ]
initial
begin
	DBus_expected[21] = 1'bX;
end 
// expected DBus[ 20 ]
initial
begin
	DBus_expected[20] = 1'bX;
end 
// expected DBus[ 19 ]
initial
begin
	DBus_expected[19] = 1'bX;
end 
// expected DBus[ 18 ]
initial
begin
	DBus_expected[18] = 1'bX;
end 
// expected DBus[ 17 ]
initial
begin
	DBus_expected[17] = 1'bX;
end 
// expected DBus[ 16 ]
initial
begin
	DBus_expected[16] = 1'bX;
end 
// expected DBus[ 15 ]
initial
begin
	DBus_expected[15] = 1'bX;
end 
// expected DBus[ 14 ]
initial
begin
	DBus_expected[14] = 1'bX;
end 
// expected DBus[ 13 ]
initial
begin
	DBus_expected[13] = 1'bX;
end 
// expected DBus[ 12 ]
initial
begin
	DBus_expected[12] = 1'bX;
end 
// expected DBus[ 11 ]
initial
begin
	DBus_expected[11] = 1'bX;
end 
// expected DBus[ 10 ]
initial
begin
	DBus_expected[10] = 1'bX;
end 
// expected DBus[ 9 ]
initial
begin
	DBus_expected[9] = 1'bX;
end 
// expected DBus[ 8 ]
initial
begin
	DBus_expected[8] = 1'bX;
end 
// expected DBus[ 7 ]
initial
begin
	DBus_expected[7] = 1'bX;
end 
// expected DBus[ 6 ]
initial
begin
	DBus_expected[6] = 1'bX;
end 
// expected DBus[ 5 ]
initial
begin
	DBus_expected[5] = 1'bX;
end 
// expected DBus[ 4 ]
initial
begin
	DBus_expected[4] = 1'bX;
end 
// expected DBus[ 3 ]
initial
begin
	DBus_expected[3] = 1'bX;
end 
// expected DBus[ 2 ]
initial
begin
	DBus_expected[2] = 1'bX;
end 
// expected DBus[ 1 ]
initial
begin
	DBus_expected[1] = 1'bX;
end 
// expected DBus[ 0 ]
initial
begin
	DBus_expected[0] = 1'bX;
end 
// expected IO_OUT[ 31 ]
initial
begin
	IO_OUT_expected[31] = 1'bX;
end 
// expected IO_OUT[ 30 ]
initial
begin
	IO_OUT_expected[30] = 1'bX;
end 
// expected IO_OUT[ 29 ]
initial
begin
	IO_OUT_expected[29] = 1'bX;
end 
// expected IO_OUT[ 28 ]
initial
begin
	IO_OUT_expected[28] = 1'bX;
end 
// expected IO_OUT[ 27 ]
initial
begin
	IO_OUT_expected[27] = 1'bX;
end 
// expected IO_OUT[ 26 ]
initial
begin
	IO_OUT_expected[26] = 1'bX;
end 
// expected IO_OUT[ 25 ]
initial
begin
	IO_OUT_expected[25] = 1'bX;
end 
// expected IO_OUT[ 24 ]
initial
begin
	IO_OUT_expected[24] = 1'bX;
end 
// expected IO_OUT[ 23 ]
initial
begin
	IO_OUT_expected[23] = 1'bX;
end 
// expected IO_OUT[ 22 ]
initial
begin
	IO_OUT_expected[22] = 1'bX;
end 
// expected IO_OUT[ 21 ]
initial
begin
	IO_OUT_expected[21] = 1'bX;
end 
// expected IO_OUT[ 20 ]
initial
begin
	IO_OUT_expected[20] = 1'bX;
end 
// expected IO_OUT[ 19 ]
initial
begin
	IO_OUT_expected[19] = 1'bX;
end 
// expected IO_OUT[ 18 ]
initial
begin
	IO_OUT_expected[18] = 1'bX;
end 
// expected IO_OUT[ 17 ]
initial
begin
	IO_OUT_expected[17] = 1'bX;
end 
// expected IO_OUT[ 16 ]
initial
begin
	IO_OUT_expected[16] = 1'bX;
end 
// expected IO_OUT[ 15 ]
initial
begin
	IO_OUT_expected[15] = 1'bX;
end 
// expected IO_OUT[ 14 ]
initial
begin
	IO_OUT_expected[14] = 1'bX;
end 
// expected IO_OUT[ 13 ]
initial
begin
	IO_OUT_expected[13] = 1'bX;
end 
// expected IO_OUT[ 12 ]
initial
begin
	IO_OUT_expected[12] = 1'bX;
end 
// expected IO_OUT[ 11 ]
initial
begin
	IO_OUT_expected[11] = 1'bX;
end 
// expected IO_OUT[ 10 ]
initial
begin
	IO_OUT_expected[10] = 1'bX;
end 
// expected IO_OUT[ 9 ]
initial
begin
	IO_OUT_expected[9] = 1'bX;
end 
// expected IO_OUT[ 8 ]
initial
begin
	IO_OUT_expected[8] = 1'bX;
end 
// expected IO_OUT[ 7 ]
initial
begin
	IO_OUT_expected[7] = 1'bX;
end 
// expected IO_OUT[ 6 ]
initial
begin
	IO_OUT_expected[6] = 1'bX;
end 
// expected IO_OUT[ 5 ]
initial
begin
	IO_OUT_expected[5] = 1'bX;
end 
// expected IO_OUT[ 4 ]
initial
begin
	IO_OUT_expected[4] = 1'bX;
end 
// expected IO_OUT[ 3 ]
initial
begin
	IO_OUT_expected[3] = 1'bX;
end 
// expected IO_OUT[ 2 ]
initial
begin
	IO_OUT_expected[2] = 1'bX;
end 
// expected IO_OUT[ 1 ]
initial
begin
	IO_OUT_expected[1] = 1'bX;
end 
// expected IO_OUT[ 0 ]
initial
begin
	IO_OUT_expected[0] = 1'bX;
end 
// expected RSource1[ 31 ]
initial
begin
	RSource1_expected[31] = 1'bX;
end 
// expected RSource1[ 30 ]
initial
begin
	RSource1_expected[30] = 1'bX;
end 
// expected RSource1[ 29 ]
initial
begin
	RSource1_expected[29] = 1'bX;
end 
// expected RSource1[ 28 ]
initial
begin
	RSource1_expected[28] = 1'bX;
end 
// expected RSource1[ 27 ]
initial
begin
	RSource1_expected[27] = 1'bX;
end 
// expected RSource1[ 26 ]
initial
begin
	RSource1_expected[26] = 1'bX;
end 
// expected RSource1[ 25 ]
initial
begin
	RSource1_expected[25] = 1'bX;
end 
// expected RSource1[ 24 ]
initial
begin
	RSource1_expected[24] = 1'bX;
end 
// expected RSource1[ 23 ]
initial
begin
	RSource1_expected[23] = 1'bX;
end 
// expected RSource1[ 22 ]
initial
begin
	RSource1_expected[22] = 1'bX;
end 
// expected RSource1[ 21 ]
initial
begin
	RSource1_expected[21] = 1'bX;
end 
// expected RSource1[ 20 ]
initial
begin
	RSource1_expected[20] = 1'bX;
end 
// expected RSource1[ 19 ]
initial
begin
	RSource1_expected[19] = 1'bX;
end 
// expected RSource1[ 18 ]
initial
begin
	RSource1_expected[18] = 1'bX;
end 
// expected RSource1[ 17 ]
initial
begin
	RSource1_expected[17] = 1'bX;
end 
// expected RSource1[ 16 ]
initial
begin
	RSource1_expected[16] = 1'bX;
end 
// expected RSource1[ 15 ]
initial
begin
	RSource1_expected[15] = 1'bX;
end 
// expected RSource1[ 14 ]
initial
begin
	RSource1_expected[14] = 1'bX;
end 
// expected RSource1[ 13 ]
initial
begin
	RSource1_expected[13] = 1'bX;
end 
// expected RSource1[ 12 ]
initial
begin
	RSource1_expected[12] = 1'bX;
end 
// expected RSource1[ 11 ]
initial
begin
	RSource1_expected[11] = 1'bX;
end 
// expected RSource1[ 10 ]
initial
begin
	RSource1_expected[10] = 1'bX;
end 
// expected RSource1[ 9 ]
initial
begin
	RSource1_expected[9] = 1'bX;
end 
// expected RSource1[ 8 ]
initial
begin
	RSource1_expected[8] = 1'bX;
end 
// expected RSource1[ 7 ]
initial
begin
	RSource1_expected[7] = 1'bX;
end 
// expected RSource1[ 6 ]
initial
begin
	RSource1_expected[6] = 1'bX;
end 
// expected RSource1[ 5 ]
initial
begin
	RSource1_expected[5] = 1'bX;
end 
// expected RSource1[ 4 ]
initial
begin
	RSource1_expected[4] = 1'bX;
end 
// expected RSource1[ 3 ]
initial
begin
	RSource1_expected[3] = 1'bX;
end 
// expected RSource1[ 2 ]
initial
begin
	RSource1_expected[2] = 1'bX;
end 
// expected RSource1[ 1 ]
initial
begin
	RSource1_expected[1] = 1'bX;
end 
// expected RSource1[ 0 ]
initial
begin
	RSource1_expected[0] = 1'bX;
end 
// expected RSource2[ 31 ]
initial
begin
	RSource2_expected[31] = 1'bX;
end 
// expected RSource2[ 30 ]
initial
begin
	RSource2_expected[30] = 1'bX;
end 
// expected RSource2[ 29 ]
initial
begin
	RSource2_expected[29] = 1'bX;
end 
// expected RSource2[ 28 ]
initial
begin
	RSource2_expected[28] = 1'bX;
end 
// expected RSource2[ 27 ]
initial
begin
	RSource2_expected[27] = 1'bX;
end 
// expected RSource2[ 26 ]
initial
begin
	RSource2_expected[26] = 1'bX;
end 
// expected RSource2[ 25 ]
initial
begin
	RSource2_expected[25] = 1'bX;
end 
// expected RSource2[ 24 ]
initial
begin
	RSource2_expected[24] = 1'bX;
end 
// expected RSource2[ 23 ]
initial
begin
	RSource2_expected[23] = 1'bX;
end 
// expected RSource2[ 22 ]
initial
begin
	RSource2_expected[22] = 1'bX;
end 
// expected RSource2[ 21 ]
initial
begin
	RSource2_expected[21] = 1'bX;
end 
// expected RSource2[ 20 ]
initial
begin
	RSource2_expected[20] = 1'bX;
end 
// expected RSource2[ 19 ]
initial
begin
	RSource2_expected[19] = 1'bX;
end 
// expected RSource2[ 18 ]
initial
begin
	RSource2_expected[18] = 1'bX;
end 
// expected RSource2[ 17 ]
initial
begin
	RSource2_expected[17] = 1'bX;
end 
// expected RSource2[ 16 ]
initial
begin
	RSource2_expected[16] = 1'bX;
end 
// expected RSource2[ 15 ]
initial
begin
	RSource2_expected[15] = 1'bX;
end 
// expected RSource2[ 14 ]
initial
begin
	RSource2_expected[14] = 1'bX;
end 
// expected RSource2[ 13 ]
initial
begin
	RSource2_expected[13] = 1'bX;
end 
// expected RSource2[ 12 ]
initial
begin
	RSource2_expected[12] = 1'bX;
end 
// expected RSource2[ 11 ]
initial
begin
	RSource2_expected[11] = 1'bX;
end 
// expected RSource2[ 10 ]
initial
begin
	RSource2_expected[10] = 1'bX;
end 
// expected RSource2[ 9 ]
initial
begin
	RSource2_expected[9] = 1'bX;
end 
// expected RSource2[ 8 ]
initial
begin
	RSource2_expected[8] = 1'bX;
end 
// expected RSource2[ 7 ]
initial
begin
	RSource2_expected[7] = 1'bX;
end 
// expected RSource2[ 6 ]
initial
begin
	RSource2_expected[6] = 1'bX;
end 
// expected RSource2[ 5 ]
initial
begin
	RSource2_expected[5] = 1'bX;
end 
// expected RSource2[ 4 ]
initial
begin
	RSource2_expected[4] = 1'bX;
end 
// expected RSource2[ 3 ]
initial
begin
	RSource2_expected[3] = 1'bX;
end 
// expected RSource2[ 2 ]
initial
begin
	RSource2_expected[2] = 1'bX;
end 
// expected RSource2[ 1 ]
initial
begin
	RSource2_expected[1] = 1'bX;
end 
// expected RSource2[ 0 ]
initial
begin
	RSource2_expected[0] = 1'bX;
end 
// expected instruction[ 31 ]
initial
begin
	instruction_expected[31] = 1'bX;
end 
// expected instruction[ 30 ]
initial
begin
	instruction_expected[30] = 1'bX;
end 
// expected instruction[ 29 ]
initial
begin
	instruction_expected[29] = 1'bX;
end 
// expected instruction[ 28 ]
initial
begin
	instruction_expected[28] = 1'bX;
end 
// expected instruction[ 27 ]
initial
begin
	instruction_expected[27] = 1'bX;
end 
// expected instruction[ 26 ]
initial
begin
	instruction_expected[26] = 1'bX;
end 
// expected instruction[ 25 ]
initial
begin
	instruction_expected[25] = 1'bX;
end 
// expected instruction[ 24 ]
initial
begin
	instruction_expected[24] = 1'bX;
end 
// expected instruction[ 23 ]
initial
begin
	instruction_expected[23] = 1'bX;
end 
// expected instruction[ 22 ]
initial
begin
	instruction_expected[22] = 1'bX;
end 
// expected instruction[ 21 ]
initial
begin
	instruction_expected[21] = 1'bX;
end 
// expected instruction[ 20 ]
initial
begin
	instruction_expected[20] = 1'bX;
end 
// expected instruction[ 19 ]
initial
begin
	instruction_expected[19] = 1'bX;
end 
// expected instruction[ 18 ]
initial
begin
	instruction_expected[18] = 1'bX;
end 
// expected instruction[ 17 ]
initial
begin
	instruction_expected[17] = 1'bX;
end 
// expected instruction[ 16 ]
initial
begin
	instruction_expected[16] = 1'bX;
end 
// expected instruction[ 15 ]
initial
begin
	instruction_expected[15] = 1'bX;
end 
// expected instruction[ 14 ]
initial
begin
	instruction_expected[14] = 1'bX;
end 
// expected instruction[ 13 ]
initial
begin
	instruction_expected[13] = 1'bX;
end 
// expected instruction[ 12 ]
initial
begin
	instruction_expected[12] = 1'bX;
end 
// expected instruction[ 11 ]
initial
begin
	instruction_expected[11] = 1'bX;
end 
// expected instruction[ 10 ]
initial
begin
	instruction_expected[10] = 1'bX;
end 
// expected instruction[ 9 ]
initial
begin
	instruction_expected[9] = 1'bX;
end 
// expected instruction[ 8 ]
initial
begin
	instruction_expected[8] = 1'bX;
end 
// expected instruction[ 7 ]
initial
begin
	instruction_expected[7] = 1'bX;
end 
// expected instruction[ 6 ]
initial
begin
	instruction_expected[6] = 1'bX;
end 
// expected instruction[ 5 ]
initial
begin
	instruction_expected[5] = 1'bX;
end 
// expected instruction[ 4 ]
initial
begin
	instruction_expected[4] = 1'bX;
end 
// expected instruction[ 3 ]
initial
begin
	instruction_expected[3] = 1'bX;
end 
// expected instruction[ 2 ]
initial
begin
	instruction_expected[2] = 1'bX;
end 
// expected instruction[ 1 ]
initial
begin
	instruction_expected[1] = 1'bX;
end 
// expected instruction[ 0 ]
initial
begin
	instruction_expected[0] = 1'bX;
end 
// expected IM_instruction_out[ 31 ]
initial
begin
	IM_instruction_out_expected[31] = 1'bX;
end 
// expected IM_instruction_out[ 30 ]
initial
begin
	IM_instruction_out_expected[30] = 1'bX;
end 
// expected IM_instruction_out[ 29 ]
initial
begin
	IM_instruction_out_expected[29] = 1'bX;
end 
// expected IM_instruction_out[ 28 ]
initial
begin
	IM_instruction_out_expected[28] = 1'bX;
end 
// expected IM_instruction_out[ 27 ]
initial
begin
	IM_instruction_out_expected[27] = 1'bX;
end 
// expected IM_instruction_out[ 26 ]
initial
begin
	IM_instruction_out_expected[26] = 1'bX;
end 
// expected IM_instruction_out[ 25 ]
initial
begin
	IM_instruction_out_expected[25] = 1'bX;
end 
// expected IM_instruction_out[ 24 ]
initial
begin
	IM_instruction_out_expected[24] = 1'bX;
end 
// expected IM_instruction_out[ 23 ]
initial
begin
	IM_instruction_out_expected[23] = 1'bX;
end 
// expected IM_instruction_out[ 22 ]
initial
begin
	IM_instruction_out_expected[22] = 1'bX;
end 
// expected IM_instruction_out[ 21 ]
initial
begin
	IM_instruction_out_expected[21] = 1'bX;
end 
// expected IM_instruction_out[ 20 ]
initial
begin
	IM_instruction_out_expected[20] = 1'bX;
end 
// expected IM_instruction_out[ 19 ]
initial
begin
	IM_instruction_out_expected[19] = 1'bX;
end 
// expected IM_instruction_out[ 18 ]
initial
begin
	IM_instruction_out_expected[18] = 1'bX;
end 
// expected IM_instruction_out[ 17 ]
initial
begin
	IM_instruction_out_expected[17] = 1'bX;
end 
// expected IM_instruction_out[ 16 ]
initial
begin
	IM_instruction_out_expected[16] = 1'bX;
end 
// expected IM_instruction_out[ 15 ]
initial
begin
	IM_instruction_out_expected[15] = 1'bX;
end 
// expected IM_instruction_out[ 14 ]
initial
begin
	IM_instruction_out_expected[14] = 1'bX;
end 
// expected IM_instruction_out[ 13 ]
initial
begin
	IM_instruction_out_expected[13] = 1'bX;
end 
// expected IM_instruction_out[ 12 ]
initial
begin
	IM_instruction_out_expected[12] = 1'bX;
end 
// expected IM_instruction_out[ 11 ]
initial
begin
	IM_instruction_out_expected[11] = 1'bX;
end 
// expected IM_instruction_out[ 10 ]
initial
begin
	IM_instruction_out_expected[10] = 1'bX;
end 
// expected IM_instruction_out[ 9 ]
initial
begin
	IM_instruction_out_expected[9] = 1'bX;
end 
// expected IM_instruction_out[ 8 ]
initial
begin
	IM_instruction_out_expected[8] = 1'bX;
end 
// expected IM_instruction_out[ 7 ]
initial
begin
	IM_instruction_out_expected[7] = 1'bX;
end 
// expected IM_instruction_out[ 6 ]
initial
begin
	IM_instruction_out_expected[6] = 1'bX;
end 
// expected IM_instruction_out[ 5 ]
initial
begin
	IM_instruction_out_expected[5] = 1'bX;
end 
// expected IM_instruction_out[ 4 ]
initial
begin
	IM_instruction_out_expected[4] = 1'bX;
end 
// expected IM_instruction_out[ 3 ]
initial
begin
	IM_instruction_out_expected[3] = 1'bX;
end 
// expected IM_instruction_out[ 2 ]
initial
begin
	IM_instruction_out_expected[2] = 1'bX;
end 
// expected IM_instruction_out[ 1 ]
initial
begin
	IM_instruction_out_expected[1] = 1'bX;
end 
// expected IM_instruction_out[ 0 ]
initial
begin
	IM_instruction_out_expected[0] = 1'bX;
end 
// expected IM_address[ 31 ]
initial
begin
	IM_address_expected[31] = 1'bX;
end 
// expected IM_address[ 30 ]
initial
begin
	IM_address_expected[30] = 1'bX;
end 
// expected IM_address[ 29 ]
initial
begin
	IM_address_expected[29] = 1'bX;
end 
// expected IM_address[ 28 ]
initial
begin
	IM_address_expected[28] = 1'bX;
end 
// expected IM_address[ 27 ]
initial
begin
	IM_address_expected[27] = 1'bX;
end 
// expected IM_address[ 26 ]
initial
begin
	IM_address_expected[26] = 1'bX;
end 
// expected IM_address[ 25 ]
initial
begin
	IM_address_expected[25] = 1'bX;
end 
// expected IM_address[ 24 ]
initial
begin
	IM_address_expected[24] = 1'bX;
end 
// expected IM_address[ 23 ]
initial
begin
	IM_address_expected[23] = 1'bX;
end 
// expected IM_address[ 22 ]
initial
begin
	IM_address_expected[22] = 1'bX;
end 
// expected IM_address[ 21 ]
initial
begin
	IM_address_expected[21] = 1'bX;
end 
// expected IM_address[ 20 ]
initial
begin
	IM_address_expected[20] = 1'bX;
end 
// expected IM_address[ 19 ]
initial
begin
	IM_address_expected[19] = 1'bX;
end 
// expected IM_address[ 18 ]
initial
begin
	IM_address_expected[18] = 1'bX;
end 
// expected IM_address[ 17 ]
initial
begin
	IM_address_expected[17] = 1'bX;
end 
// expected IM_address[ 16 ]
initial
begin
	IM_address_expected[16] = 1'bX;
end 
// expected IM_address[ 15 ]
initial
begin
	IM_address_expected[15] = 1'bX;
end 
// expected IM_address[ 14 ]
initial
begin
	IM_address_expected[14] = 1'bX;
end 
// expected IM_address[ 13 ]
initial
begin
	IM_address_expected[13] = 1'bX;
end 
// expected IM_address[ 12 ]
initial
begin
	IM_address_expected[12] = 1'bX;
end 
// expected IM_address[ 11 ]
initial
begin
	IM_address_expected[11] = 1'bX;
end 
// expected IM_address[ 10 ]
initial
begin
	IM_address_expected[10] = 1'bX;
end 
// expected IM_address[ 9 ]
initial
begin
	IM_address_expected[9] = 1'bX;
end 
// expected IM_address[ 8 ]
initial
begin
	IM_address_expected[8] = 1'bX;
end 
// expected IM_address[ 7 ]
initial
begin
	IM_address_expected[7] = 1'bX;
end 
// expected IM_address[ 6 ]
initial
begin
	IM_address_expected[6] = 1'bX;
end 
// expected IM_address[ 5 ]
initial
begin
	IM_address_expected[5] = 1'bX;
end 
// expected IM_address[ 4 ]
initial
begin
	IM_address_expected[4] = 1'bX;
end 
// expected IM_address[ 3 ]
initial
begin
	IM_address_expected[3] = 1'bX;
end 
// expected IM_address[ 2 ]
initial
begin
	IM_address_expected[2] = 1'bX;
end 
// expected IM_address[ 1 ]
initial
begin
	IM_address_expected[1] = 1'bX;
end 
// expected IM_address[ 0 ]
initial
begin
	IM_address_expected[0] = 1'bX;
end 
// expected stat_CVNZ[ 3 ]
initial
begin
	stat_CVNZ_expected[3] = 1'bX;
end 
// expected stat_CVNZ[ 2 ]
initial
begin
	stat_CVNZ_expected[2] = 1'bX;
end 
// expected stat_CVNZ[ 1 ]
initial
begin
	stat_CVNZ_expected[1] = 1'bX;
end 
// expected stat_CVNZ[ 0 ]
initial
begin
	stat_CVNZ_expected[0] = 1'bX;
end 

// expected ALU_2_DBus
initial
begin
	ALU_2_DBus_expected = 1'bX;
end 

// expected DM_2_DBus
initial
begin
	DM_2_DBus_expected = 1'bX;
end 

// expected DM_Rd
initial
begin
	DM_Rd_expected = 1'bX;
end 

// expected DM_Wr
initial
begin
	DM_Wr_expected = 1'bX;
end 

// expected IO_2_Reg
initial
begin
	IO_2_Reg_expected = 1'bX;
end 

// expected IR_Ld
initial
begin
	IR_Ld_expected = 1'bX;
end 

// expected Pc_Inc
initial
begin
	Pc_Inc_expected = 1'bX;
end 

// expected Pc_Ld
initial
begin
	Pc_Ld_expected = 1'bX;
end 

// expected PC_Ld_En
initial
begin
	PC_Ld_En_expected = 1'bX;
end 

// expected Reg_2_IO
initial
begin
	Reg_2_IO_expected = 1'bX;
end 

// expected Reg_Wr
initial
begin
	Reg_Wr_expected = 1'bX;
end 

// expected Stat_Wr
initial
begin
	Stat_Wr_expected = 1'bX;
end 
// generate trigger
always @(ALU_2_DBus_expected or ALU_2_DBus or DBus_expected or DBus or DM_2_DBus_expected or DM_2_DBus or DM_Rd_expected or DM_Rd or DM_Wr_expected or DM_Wr or IM_address_expected or IM_address or IM_instruction_out_expected or IM_instruction_out or instruction_expected or instruction or IO_2_Reg_expected or IO_2_Reg or IO_OUT_expected or IO_OUT or IR_Ld_expected or IR_Ld or Pc_Inc_expected or Pc_Inc or Pc_Ld_expected or Pc_Ld or PC_Ld_En_expected or PC_Ld_En or Reg_2_IO_expected or Reg_2_IO or Reg_Wr_expected or Reg_Wr or RSource1_expected or RSource1 or RSource2_expected or RSource2 or stat_CVNZ_expected or stat_CVNZ or Stat_Wr_expected or Stat_Wr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_2_DBus = %b | expected DBus = %b | expected DM_2_DBus = %b | expected DM_Rd = %b | expected DM_Wr = %b | expected IM_address = %b | expected IM_instruction_out = %b | expected instruction = %b | expected IO_2_Reg = %b | expected IO_OUT = %b | expected IR_Ld = %b | expected Pc_Inc = %b | expected Pc_Ld = %b | expected PC_Ld_En = %b | expected Reg_2_IO = %b | expected Reg_Wr = %b | expected RSource1 = %b | expected RSource2 = %b | expected stat_CVNZ = %b | expected Stat_Wr = %b | ",ALU_2_DBus_expected_prev,DBus_expected_prev,DM_2_DBus_expected_prev,DM_Rd_expected_prev,DM_Wr_expected_prev,IM_address_expected_prev,IM_instruction_out_expected_prev,instruction_expected_prev,IO_2_Reg_expected_prev,IO_OUT_expected_prev,IR_Ld_expected_prev,Pc_Inc_expected_prev,Pc_Ld_expected_prev,PC_Ld_En_expected_prev,Reg_2_IO_expected_prev,Reg_Wr_expected_prev,RSource1_expected_prev,RSource2_expected_prev,stat_CVNZ_expected_prev,Stat_Wr_expected_prev);
	$display("| real ALU_2_DBus = %b | real DBus = %b | real DM_2_DBus = %b | real DM_Rd = %b | real DM_Wr = %b | real IM_address = %b | real IM_instruction_out = %b | real instruction = %b | real IO_2_Reg = %b | real IO_OUT = %b | real IR_Ld = %b | real Pc_Inc = %b | real Pc_Ld = %b | real PC_Ld_En = %b | real Reg_2_IO = %b | real Reg_Wr = %b | real RSource1 = %b | real RSource2 = %b | real stat_CVNZ = %b | real Stat_Wr = %b | ",ALU_2_DBus_prev,DBus_prev,DM_2_DBus_prev,DM_Rd_prev,DM_Wr_prev,IM_address_prev,IM_instruction_out_prev,instruction_prev,IO_2_Reg_prev,IO_OUT_prev,IR_Ld_prev,Pc_Inc_prev,Pc_Ld_prev,PC_Ld_En_prev,Reg_2_IO_prev,Reg_Wr_prev,RSource1_prev,RSource2_prev,stat_CVNZ_prev,Stat_Wr_prev);
`endif
	if (
		( ALU_2_DBus_expected_prev !== 1'bx ) && ( ALU_2_DBus_prev !== ALU_2_DBus_expected_prev )
		&& ((ALU_2_DBus_expected_prev !== last_ALU_2_DBus_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_2_DBus :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_2_DBus_expected_prev);
		$display ("     Real value = %b", ALU_2_DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_2_DBus_exp = ALU_2_DBus_expected_prev;
	end
	if (
		( DBus_expected_prev[0] !== 1'bx ) && ( DBus_prev[0] !== DBus_expected_prev[0] )
		&& ((DBus_expected_prev[0] !== last_DBus_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[0] = DBus_expected_prev[0];
	end
	if (
		( DBus_expected_prev[1] !== 1'bx ) && ( DBus_prev[1] !== DBus_expected_prev[1] )
		&& ((DBus_expected_prev[1] !== last_DBus_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[1] = DBus_expected_prev[1];
	end
	if (
		( DBus_expected_prev[2] !== 1'bx ) && ( DBus_prev[2] !== DBus_expected_prev[2] )
		&& ((DBus_expected_prev[2] !== last_DBus_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[2] = DBus_expected_prev[2];
	end
	if (
		( DBus_expected_prev[3] !== 1'bx ) && ( DBus_prev[3] !== DBus_expected_prev[3] )
		&& ((DBus_expected_prev[3] !== last_DBus_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[3] = DBus_expected_prev[3];
	end
	if (
		( DBus_expected_prev[4] !== 1'bx ) && ( DBus_prev[4] !== DBus_expected_prev[4] )
		&& ((DBus_expected_prev[4] !== last_DBus_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[4] = DBus_expected_prev[4];
	end
	if (
		( DBus_expected_prev[5] !== 1'bx ) && ( DBus_prev[5] !== DBus_expected_prev[5] )
		&& ((DBus_expected_prev[5] !== last_DBus_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[5] = DBus_expected_prev[5];
	end
	if (
		( DBus_expected_prev[6] !== 1'bx ) && ( DBus_prev[6] !== DBus_expected_prev[6] )
		&& ((DBus_expected_prev[6] !== last_DBus_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[6] = DBus_expected_prev[6];
	end
	if (
		( DBus_expected_prev[7] !== 1'bx ) && ( DBus_prev[7] !== DBus_expected_prev[7] )
		&& ((DBus_expected_prev[7] !== last_DBus_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[7] = DBus_expected_prev[7];
	end
	if (
		( DBus_expected_prev[8] !== 1'bx ) && ( DBus_prev[8] !== DBus_expected_prev[8] )
		&& ((DBus_expected_prev[8] !== last_DBus_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[8] = DBus_expected_prev[8];
	end
	if (
		( DBus_expected_prev[9] !== 1'bx ) && ( DBus_prev[9] !== DBus_expected_prev[9] )
		&& ((DBus_expected_prev[9] !== last_DBus_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[9] = DBus_expected_prev[9];
	end
	if (
		( DBus_expected_prev[10] !== 1'bx ) && ( DBus_prev[10] !== DBus_expected_prev[10] )
		&& ((DBus_expected_prev[10] !== last_DBus_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[10] = DBus_expected_prev[10];
	end
	if (
		( DBus_expected_prev[11] !== 1'bx ) && ( DBus_prev[11] !== DBus_expected_prev[11] )
		&& ((DBus_expected_prev[11] !== last_DBus_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[11] = DBus_expected_prev[11];
	end
	if (
		( DBus_expected_prev[12] !== 1'bx ) && ( DBus_prev[12] !== DBus_expected_prev[12] )
		&& ((DBus_expected_prev[12] !== last_DBus_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[12] = DBus_expected_prev[12];
	end
	if (
		( DBus_expected_prev[13] !== 1'bx ) && ( DBus_prev[13] !== DBus_expected_prev[13] )
		&& ((DBus_expected_prev[13] !== last_DBus_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[13] = DBus_expected_prev[13];
	end
	if (
		( DBus_expected_prev[14] !== 1'bx ) && ( DBus_prev[14] !== DBus_expected_prev[14] )
		&& ((DBus_expected_prev[14] !== last_DBus_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[14] = DBus_expected_prev[14];
	end
	if (
		( DBus_expected_prev[15] !== 1'bx ) && ( DBus_prev[15] !== DBus_expected_prev[15] )
		&& ((DBus_expected_prev[15] !== last_DBus_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[15] = DBus_expected_prev[15];
	end
	if (
		( DBus_expected_prev[16] !== 1'bx ) && ( DBus_prev[16] !== DBus_expected_prev[16] )
		&& ((DBus_expected_prev[16] !== last_DBus_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[16] = DBus_expected_prev[16];
	end
	if (
		( DBus_expected_prev[17] !== 1'bx ) && ( DBus_prev[17] !== DBus_expected_prev[17] )
		&& ((DBus_expected_prev[17] !== last_DBus_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[17] = DBus_expected_prev[17];
	end
	if (
		( DBus_expected_prev[18] !== 1'bx ) && ( DBus_prev[18] !== DBus_expected_prev[18] )
		&& ((DBus_expected_prev[18] !== last_DBus_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[18] = DBus_expected_prev[18];
	end
	if (
		( DBus_expected_prev[19] !== 1'bx ) && ( DBus_prev[19] !== DBus_expected_prev[19] )
		&& ((DBus_expected_prev[19] !== last_DBus_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[19] = DBus_expected_prev[19];
	end
	if (
		( DBus_expected_prev[20] !== 1'bx ) && ( DBus_prev[20] !== DBus_expected_prev[20] )
		&& ((DBus_expected_prev[20] !== last_DBus_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[20] = DBus_expected_prev[20];
	end
	if (
		( DBus_expected_prev[21] !== 1'bx ) && ( DBus_prev[21] !== DBus_expected_prev[21] )
		&& ((DBus_expected_prev[21] !== last_DBus_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[21] = DBus_expected_prev[21];
	end
	if (
		( DBus_expected_prev[22] !== 1'bx ) && ( DBus_prev[22] !== DBus_expected_prev[22] )
		&& ((DBus_expected_prev[22] !== last_DBus_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[22] = DBus_expected_prev[22];
	end
	if (
		( DBus_expected_prev[23] !== 1'bx ) && ( DBus_prev[23] !== DBus_expected_prev[23] )
		&& ((DBus_expected_prev[23] !== last_DBus_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[23] = DBus_expected_prev[23];
	end
	if (
		( DBus_expected_prev[24] !== 1'bx ) && ( DBus_prev[24] !== DBus_expected_prev[24] )
		&& ((DBus_expected_prev[24] !== last_DBus_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[24] = DBus_expected_prev[24];
	end
	if (
		( DBus_expected_prev[25] !== 1'bx ) && ( DBus_prev[25] !== DBus_expected_prev[25] )
		&& ((DBus_expected_prev[25] !== last_DBus_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[25] = DBus_expected_prev[25];
	end
	if (
		( DBus_expected_prev[26] !== 1'bx ) && ( DBus_prev[26] !== DBus_expected_prev[26] )
		&& ((DBus_expected_prev[26] !== last_DBus_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[26] = DBus_expected_prev[26];
	end
	if (
		( DBus_expected_prev[27] !== 1'bx ) && ( DBus_prev[27] !== DBus_expected_prev[27] )
		&& ((DBus_expected_prev[27] !== last_DBus_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[27] = DBus_expected_prev[27];
	end
	if (
		( DBus_expected_prev[28] !== 1'bx ) && ( DBus_prev[28] !== DBus_expected_prev[28] )
		&& ((DBus_expected_prev[28] !== last_DBus_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[28] = DBus_expected_prev[28];
	end
	if (
		( DBus_expected_prev[29] !== 1'bx ) && ( DBus_prev[29] !== DBus_expected_prev[29] )
		&& ((DBus_expected_prev[29] !== last_DBus_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[29] = DBus_expected_prev[29];
	end
	if (
		( DBus_expected_prev[30] !== 1'bx ) && ( DBus_prev[30] !== DBus_expected_prev[30] )
		&& ((DBus_expected_prev[30] !== last_DBus_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[30] = DBus_expected_prev[30];
	end
	if (
		( DBus_expected_prev[31] !== 1'bx ) && ( DBus_prev[31] !== DBus_expected_prev[31] )
		&& ((DBus_expected_prev[31] !== last_DBus_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBus[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBus_expected_prev);
		$display ("     Real value = %b", DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBus_exp[31] = DBus_expected_prev[31];
	end
	if (
		( DM_2_DBus_expected_prev !== 1'bx ) && ( DM_2_DBus_prev !== DM_2_DBus_expected_prev )
		&& ((DM_2_DBus_expected_prev !== last_DM_2_DBus_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DM_2_DBus :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DM_2_DBus_expected_prev);
		$display ("     Real value = %b", DM_2_DBus_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DM_2_DBus_exp = DM_2_DBus_expected_prev;
	end
	if (
		( DM_Rd_expected_prev !== 1'bx ) && ( DM_Rd_prev !== DM_Rd_expected_prev )
		&& ((DM_Rd_expected_prev !== last_DM_Rd_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DM_Rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DM_Rd_expected_prev);
		$display ("     Real value = %b", DM_Rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DM_Rd_exp = DM_Rd_expected_prev;
	end
	if (
		( DM_Wr_expected_prev !== 1'bx ) && ( DM_Wr_prev !== DM_Wr_expected_prev )
		&& ((DM_Wr_expected_prev !== last_DM_Wr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DM_Wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DM_Wr_expected_prev);
		$display ("     Real value = %b", DM_Wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DM_Wr_exp = DM_Wr_expected_prev;
	end
	if (
		( IM_address_expected_prev[0] !== 1'bx ) && ( IM_address_prev[0] !== IM_address_expected_prev[0] )
		&& ((IM_address_expected_prev[0] !== last_IM_address_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[0] = IM_address_expected_prev[0];
	end
	if (
		( IM_address_expected_prev[1] !== 1'bx ) && ( IM_address_prev[1] !== IM_address_expected_prev[1] )
		&& ((IM_address_expected_prev[1] !== last_IM_address_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[1] = IM_address_expected_prev[1];
	end
	if (
		( IM_address_expected_prev[2] !== 1'bx ) && ( IM_address_prev[2] !== IM_address_expected_prev[2] )
		&& ((IM_address_expected_prev[2] !== last_IM_address_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[2] = IM_address_expected_prev[2];
	end
	if (
		( IM_address_expected_prev[3] !== 1'bx ) && ( IM_address_prev[3] !== IM_address_expected_prev[3] )
		&& ((IM_address_expected_prev[3] !== last_IM_address_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[3] = IM_address_expected_prev[3];
	end
	if (
		( IM_address_expected_prev[4] !== 1'bx ) && ( IM_address_prev[4] !== IM_address_expected_prev[4] )
		&& ((IM_address_expected_prev[4] !== last_IM_address_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[4] = IM_address_expected_prev[4];
	end
	if (
		( IM_address_expected_prev[5] !== 1'bx ) && ( IM_address_prev[5] !== IM_address_expected_prev[5] )
		&& ((IM_address_expected_prev[5] !== last_IM_address_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[5] = IM_address_expected_prev[5];
	end
	if (
		( IM_address_expected_prev[6] !== 1'bx ) && ( IM_address_prev[6] !== IM_address_expected_prev[6] )
		&& ((IM_address_expected_prev[6] !== last_IM_address_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[6] = IM_address_expected_prev[6];
	end
	if (
		( IM_address_expected_prev[7] !== 1'bx ) && ( IM_address_prev[7] !== IM_address_expected_prev[7] )
		&& ((IM_address_expected_prev[7] !== last_IM_address_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[7] = IM_address_expected_prev[7];
	end
	if (
		( IM_address_expected_prev[8] !== 1'bx ) && ( IM_address_prev[8] !== IM_address_expected_prev[8] )
		&& ((IM_address_expected_prev[8] !== last_IM_address_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[8] = IM_address_expected_prev[8];
	end
	if (
		( IM_address_expected_prev[9] !== 1'bx ) && ( IM_address_prev[9] !== IM_address_expected_prev[9] )
		&& ((IM_address_expected_prev[9] !== last_IM_address_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[9] = IM_address_expected_prev[9];
	end
	if (
		( IM_address_expected_prev[10] !== 1'bx ) && ( IM_address_prev[10] !== IM_address_expected_prev[10] )
		&& ((IM_address_expected_prev[10] !== last_IM_address_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[10] = IM_address_expected_prev[10];
	end
	if (
		( IM_address_expected_prev[11] !== 1'bx ) && ( IM_address_prev[11] !== IM_address_expected_prev[11] )
		&& ((IM_address_expected_prev[11] !== last_IM_address_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[11] = IM_address_expected_prev[11];
	end
	if (
		( IM_address_expected_prev[12] !== 1'bx ) && ( IM_address_prev[12] !== IM_address_expected_prev[12] )
		&& ((IM_address_expected_prev[12] !== last_IM_address_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[12] = IM_address_expected_prev[12];
	end
	if (
		( IM_address_expected_prev[13] !== 1'bx ) && ( IM_address_prev[13] !== IM_address_expected_prev[13] )
		&& ((IM_address_expected_prev[13] !== last_IM_address_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[13] = IM_address_expected_prev[13];
	end
	if (
		( IM_address_expected_prev[14] !== 1'bx ) && ( IM_address_prev[14] !== IM_address_expected_prev[14] )
		&& ((IM_address_expected_prev[14] !== last_IM_address_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[14] = IM_address_expected_prev[14];
	end
	if (
		( IM_address_expected_prev[15] !== 1'bx ) && ( IM_address_prev[15] !== IM_address_expected_prev[15] )
		&& ((IM_address_expected_prev[15] !== last_IM_address_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[15] = IM_address_expected_prev[15];
	end
	if (
		( IM_address_expected_prev[16] !== 1'bx ) && ( IM_address_prev[16] !== IM_address_expected_prev[16] )
		&& ((IM_address_expected_prev[16] !== last_IM_address_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[16] = IM_address_expected_prev[16];
	end
	if (
		( IM_address_expected_prev[17] !== 1'bx ) && ( IM_address_prev[17] !== IM_address_expected_prev[17] )
		&& ((IM_address_expected_prev[17] !== last_IM_address_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[17] = IM_address_expected_prev[17];
	end
	if (
		( IM_address_expected_prev[18] !== 1'bx ) && ( IM_address_prev[18] !== IM_address_expected_prev[18] )
		&& ((IM_address_expected_prev[18] !== last_IM_address_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[18] = IM_address_expected_prev[18];
	end
	if (
		( IM_address_expected_prev[19] !== 1'bx ) && ( IM_address_prev[19] !== IM_address_expected_prev[19] )
		&& ((IM_address_expected_prev[19] !== last_IM_address_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[19] = IM_address_expected_prev[19];
	end
	if (
		( IM_address_expected_prev[20] !== 1'bx ) && ( IM_address_prev[20] !== IM_address_expected_prev[20] )
		&& ((IM_address_expected_prev[20] !== last_IM_address_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[20] = IM_address_expected_prev[20];
	end
	if (
		( IM_address_expected_prev[21] !== 1'bx ) && ( IM_address_prev[21] !== IM_address_expected_prev[21] )
		&& ((IM_address_expected_prev[21] !== last_IM_address_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[21] = IM_address_expected_prev[21];
	end
	if (
		( IM_address_expected_prev[22] !== 1'bx ) && ( IM_address_prev[22] !== IM_address_expected_prev[22] )
		&& ((IM_address_expected_prev[22] !== last_IM_address_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[22] = IM_address_expected_prev[22];
	end
	if (
		( IM_address_expected_prev[23] !== 1'bx ) && ( IM_address_prev[23] !== IM_address_expected_prev[23] )
		&& ((IM_address_expected_prev[23] !== last_IM_address_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[23] = IM_address_expected_prev[23];
	end
	if (
		( IM_address_expected_prev[24] !== 1'bx ) && ( IM_address_prev[24] !== IM_address_expected_prev[24] )
		&& ((IM_address_expected_prev[24] !== last_IM_address_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[24] = IM_address_expected_prev[24];
	end
	if (
		( IM_address_expected_prev[25] !== 1'bx ) && ( IM_address_prev[25] !== IM_address_expected_prev[25] )
		&& ((IM_address_expected_prev[25] !== last_IM_address_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[25] = IM_address_expected_prev[25];
	end
	if (
		( IM_address_expected_prev[26] !== 1'bx ) && ( IM_address_prev[26] !== IM_address_expected_prev[26] )
		&& ((IM_address_expected_prev[26] !== last_IM_address_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[26] = IM_address_expected_prev[26];
	end
	if (
		( IM_address_expected_prev[27] !== 1'bx ) && ( IM_address_prev[27] !== IM_address_expected_prev[27] )
		&& ((IM_address_expected_prev[27] !== last_IM_address_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[27] = IM_address_expected_prev[27];
	end
	if (
		( IM_address_expected_prev[28] !== 1'bx ) && ( IM_address_prev[28] !== IM_address_expected_prev[28] )
		&& ((IM_address_expected_prev[28] !== last_IM_address_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[28] = IM_address_expected_prev[28];
	end
	if (
		( IM_address_expected_prev[29] !== 1'bx ) && ( IM_address_prev[29] !== IM_address_expected_prev[29] )
		&& ((IM_address_expected_prev[29] !== last_IM_address_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[29] = IM_address_expected_prev[29];
	end
	if (
		( IM_address_expected_prev[30] !== 1'bx ) && ( IM_address_prev[30] !== IM_address_expected_prev[30] )
		&& ((IM_address_expected_prev[30] !== last_IM_address_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[30] = IM_address_expected_prev[30];
	end
	if (
		( IM_address_expected_prev[31] !== 1'bx ) && ( IM_address_prev[31] !== IM_address_expected_prev[31] )
		&& ((IM_address_expected_prev[31] !== last_IM_address_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_address[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_address_expected_prev);
		$display ("     Real value = %b", IM_address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IM_address_exp[31] = IM_address_expected_prev[31];
	end
	if (
		( IM_instruction_out_expected_prev[0] !== 1'bx ) && ( IM_instruction_out_prev[0] !== IM_instruction_out_expected_prev[0] )
		&& ((IM_instruction_out_expected_prev[0] !== last_IM_instruction_out_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[0] = IM_instruction_out_expected_prev[0];
	end
	if (
		( IM_instruction_out_expected_prev[1] !== 1'bx ) && ( IM_instruction_out_prev[1] !== IM_instruction_out_expected_prev[1] )
		&& ((IM_instruction_out_expected_prev[1] !== last_IM_instruction_out_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[1] = IM_instruction_out_expected_prev[1];
	end
	if (
		( IM_instruction_out_expected_prev[2] !== 1'bx ) && ( IM_instruction_out_prev[2] !== IM_instruction_out_expected_prev[2] )
		&& ((IM_instruction_out_expected_prev[2] !== last_IM_instruction_out_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[2] = IM_instruction_out_expected_prev[2];
	end
	if (
		( IM_instruction_out_expected_prev[3] !== 1'bx ) && ( IM_instruction_out_prev[3] !== IM_instruction_out_expected_prev[3] )
		&& ((IM_instruction_out_expected_prev[3] !== last_IM_instruction_out_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[3] = IM_instruction_out_expected_prev[3];
	end
	if (
		( IM_instruction_out_expected_prev[4] !== 1'bx ) && ( IM_instruction_out_prev[4] !== IM_instruction_out_expected_prev[4] )
		&& ((IM_instruction_out_expected_prev[4] !== last_IM_instruction_out_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[4] = IM_instruction_out_expected_prev[4];
	end
	if (
		( IM_instruction_out_expected_prev[5] !== 1'bx ) && ( IM_instruction_out_prev[5] !== IM_instruction_out_expected_prev[5] )
		&& ((IM_instruction_out_expected_prev[5] !== last_IM_instruction_out_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[5] = IM_instruction_out_expected_prev[5];
	end
	if (
		( IM_instruction_out_expected_prev[6] !== 1'bx ) && ( IM_instruction_out_prev[6] !== IM_instruction_out_expected_prev[6] )
		&& ((IM_instruction_out_expected_prev[6] !== last_IM_instruction_out_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[6] = IM_instruction_out_expected_prev[6];
	end
	if (
		( IM_instruction_out_expected_prev[7] !== 1'bx ) && ( IM_instruction_out_prev[7] !== IM_instruction_out_expected_prev[7] )
		&& ((IM_instruction_out_expected_prev[7] !== last_IM_instruction_out_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[7] = IM_instruction_out_expected_prev[7];
	end
	if (
		( IM_instruction_out_expected_prev[8] !== 1'bx ) && ( IM_instruction_out_prev[8] !== IM_instruction_out_expected_prev[8] )
		&& ((IM_instruction_out_expected_prev[8] !== last_IM_instruction_out_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[8] = IM_instruction_out_expected_prev[8];
	end
	if (
		( IM_instruction_out_expected_prev[9] !== 1'bx ) && ( IM_instruction_out_prev[9] !== IM_instruction_out_expected_prev[9] )
		&& ((IM_instruction_out_expected_prev[9] !== last_IM_instruction_out_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[9] = IM_instruction_out_expected_prev[9];
	end
	if (
		( IM_instruction_out_expected_prev[10] !== 1'bx ) && ( IM_instruction_out_prev[10] !== IM_instruction_out_expected_prev[10] )
		&& ((IM_instruction_out_expected_prev[10] !== last_IM_instruction_out_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[10] = IM_instruction_out_expected_prev[10];
	end
	if (
		( IM_instruction_out_expected_prev[11] !== 1'bx ) && ( IM_instruction_out_prev[11] !== IM_instruction_out_expected_prev[11] )
		&& ((IM_instruction_out_expected_prev[11] !== last_IM_instruction_out_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[11] = IM_instruction_out_expected_prev[11];
	end
	if (
		( IM_instruction_out_expected_prev[12] !== 1'bx ) && ( IM_instruction_out_prev[12] !== IM_instruction_out_expected_prev[12] )
		&& ((IM_instruction_out_expected_prev[12] !== last_IM_instruction_out_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[12] = IM_instruction_out_expected_prev[12];
	end
	if (
		( IM_instruction_out_expected_prev[13] !== 1'bx ) && ( IM_instruction_out_prev[13] !== IM_instruction_out_expected_prev[13] )
		&& ((IM_instruction_out_expected_prev[13] !== last_IM_instruction_out_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[13] = IM_instruction_out_expected_prev[13];
	end
	if (
		( IM_instruction_out_expected_prev[14] !== 1'bx ) && ( IM_instruction_out_prev[14] !== IM_instruction_out_expected_prev[14] )
		&& ((IM_instruction_out_expected_prev[14] !== last_IM_instruction_out_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[14] = IM_instruction_out_expected_prev[14];
	end
	if (
		( IM_instruction_out_expected_prev[15] !== 1'bx ) && ( IM_instruction_out_prev[15] !== IM_instruction_out_expected_prev[15] )
		&& ((IM_instruction_out_expected_prev[15] !== last_IM_instruction_out_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[15] = IM_instruction_out_expected_prev[15];
	end
	if (
		( IM_instruction_out_expected_prev[16] !== 1'bx ) && ( IM_instruction_out_prev[16] !== IM_instruction_out_expected_prev[16] )
		&& ((IM_instruction_out_expected_prev[16] !== last_IM_instruction_out_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[16] = IM_instruction_out_expected_prev[16];
	end
	if (
		( IM_instruction_out_expected_prev[17] !== 1'bx ) && ( IM_instruction_out_prev[17] !== IM_instruction_out_expected_prev[17] )
		&& ((IM_instruction_out_expected_prev[17] !== last_IM_instruction_out_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[17] = IM_instruction_out_expected_prev[17];
	end
	if (
		( IM_instruction_out_expected_prev[18] !== 1'bx ) && ( IM_instruction_out_prev[18] !== IM_instruction_out_expected_prev[18] )
		&& ((IM_instruction_out_expected_prev[18] !== last_IM_instruction_out_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[18] = IM_instruction_out_expected_prev[18];
	end
	if (
		( IM_instruction_out_expected_prev[19] !== 1'bx ) && ( IM_instruction_out_prev[19] !== IM_instruction_out_expected_prev[19] )
		&& ((IM_instruction_out_expected_prev[19] !== last_IM_instruction_out_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[19] = IM_instruction_out_expected_prev[19];
	end
	if (
		( IM_instruction_out_expected_prev[20] !== 1'bx ) && ( IM_instruction_out_prev[20] !== IM_instruction_out_expected_prev[20] )
		&& ((IM_instruction_out_expected_prev[20] !== last_IM_instruction_out_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[20] = IM_instruction_out_expected_prev[20];
	end
	if (
		( IM_instruction_out_expected_prev[21] !== 1'bx ) && ( IM_instruction_out_prev[21] !== IM_instruction_out_expected_prev[21] )
		&& ((IM_instruction_out_expected_prev[21] !== last_IM_instruction_out_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[21] = IM_instruction_out_expected_prev[21];
	end
	if (
		( IM_instruction_out_expected_prev[22] !== 1'bx ) && ( IM_instruction_out_prev[22] !== IM_instruction_out_expected_prev[22] )
		&& ((IM_instruction_out_expected_prev[22] !== last_IM_instruction_out_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[22] = IM_instruction_out_expected_prev[22];
	end
	if (
		( IM_instruction_out_expected_prev[23] !== 1'bx ) && ( IM_instruction_out_prev[23] !== IM_instruction_out_expected_prev[23] )
		&& ((IM_instruction_out_expected_prev[23] !== last_IM_instruction_out_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[23] = IM_instruction_out_expected_prev[23];
	end
	if (
		( IM_instruction_out_expected_prev[24] !== 1'bx ) && ( IM_instruction_out_prev[24] !== IM_instruction_out_expected_prev[24] )
		&& ((IM_instruction_out_expected_prev[24] !== last_IM_instruction_out_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[24] = IM_instruction_out_expected_prev[24];
	end
	if (
		( IM_instruction_out_expected_prev[25] !== 1'bx ) && ( IM_instruction_out_prev[25] !== IM_instruction_out_expected_prev[25] )
		&& ((IM_instruction_out_expected_prev[25] !== last_IM_instruction_out_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[25] = IM_instruction_out_expected_prev[25];
	end
	if (
		( IM_instruction_out_expected_prev[26] !== 1'bx ) && ( IM_instruction_out_prev[26] !== IM_instruction_out_expected_prev[26] )
		&& ((IM_instruction_out_expected_prev[26] !== last_IM_instruction_out_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[26] = IM_instruction_out_expected_prev[26];
	end
	if (
		( IM_instruction_out_expected_prev[27] !== 1'bx ) && ( IM_instruction_out_prev[27] !== IM_instruction_out_expected_prev[27] )
		&& ((IM_instruction_out_expected_prev[27] !== last_IM_instruction_out_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[27] = IM_instruction_out_expected_prev[27];
	end
	if (
		( IM_instruction_out_expected_prev[28] !== 1'bx ) && ( IM_instruction_out_prev[28] !== IM_instruction_out_expected_prev[28] )
		&& ((IM_instruction_out_expected_prev[28] !== last_IM_instruction_out_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[28] = IM_instruction_out_expected_prev[28];
	end
	if (
		( IM_instruction_out_expected_prev[29] !== 1'bx ) && ( IM_instruction_out_prev[29] !== IM_instruction_out_expected_prev[29] )
		&& ((IM_instruction_out_expected_prev[29] !== last_IM_instruction_out_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[29] = IM_instruction_out_expected_prev[29];
	end
	if (
		( IM_instruction_out_expected_prev[30] !== 1'bx ) && ( IM_instruction_out_prev[30] !== IM_instruction_out_expected_prev[30] )
		&& ((IM_instruction_out_expected_prev[30] !== last_IM_instruction_out_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[30] = IM_instruction_out_expected_prev[30];
	end
	if (
		( IM_instruction_out_expected_prev[31] !== 1'bx ) && ( IM_instruction_out_prev[31] !== IM_instruction_out_expected_prev[31] )
		&& ((IM_instruction_out_expected_prev[31] !== last_IM_instruction_out_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IM_instruction_out[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IM_instruction_out_expected_prev);
		$display ("     Real value = %b", IM_instruction_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IM_instruction_out_exp[31] = IM_instruction_out_expected_prev[31];
	end
	if (
		( instruction_expected_prev[0] !== 1'bx ) && ( instruction_prev[0] !== instruction_expected_prev[0] )
		&& ((instruction_expected_prev[0] !== last_instruction_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[0] = instruction_expected_prev[0];
	end
	if (
		( instruction_expected_prev[1] !== 1'bx ) && ( instruction_prev[1] !== instruction_expected_prev[1] )
		&& ((instruction_expected_prev[1] !== last_instruction_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[1] = instruction_expected_prev[1];
	end
	if (
		( instruction_expected_prev[2] !== 1'bx ) && ( instruction_prev[2] !== instruction_expected_prev[2] )
		&& ((instruction_expected_prev[2] !== last_instruction_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[2] = instruction_expected_prev[2];
	end
	if (
		( instruction_expected_prev[3] !== 1'bx ) && ( instruction_prev[3] !== instruction_expected_prev[3] )
		&& ((instruction_expected_prev[3] !== last_instruction_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[3] = instruction_expected_prev[3];
	end
	if (
		( instruction_expected_prev[4] !== 1'bx ) && ( instruction_prev[4] !== instruction_expected_prev[4] )
		&& ((instruction_expected_prev[4] !== last_instruction_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[4] = instruction_expected_prev[4];
	end
	if (
		( instruction_expected_prev[5] !== 1'bx ) && ( instruction_prev[5] !== instruction_expected_prev[5] )
		&& ((instruction_expected_prev[5] !== last_instruction_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[5] = instruction_expected_prev[5];
	end
	if (
		( instruction_expected_prev[6] !== 1'bx ) && ( instruction_prev[6] !== instruction_expected_prev[6] )
		&& ((instruction_expected_prev[6] !== last_instruction_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[6] = instruction_expected_prev[6];
	end
	if (
		( instruction_expected_prev[7] !== 1'bx ) && ( instruction_prev[7] !== instruction_expected_prev[7] )
		&& ((instruction_expected_prev[7] !== last_instruction_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[7] = instruction_expected_prev[7];
	end
	if (
		( instruction_expected_prev[8] !== 1'bx ) && ( instruction_prev[8] !== instruction_expected_prev[8] )
		&& ((instruction_expected_prev[8] !== last_instruction_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[8] = instruction_expected_prev[8];
	end
	if (
		( instruction_expected_prev[9] !== 1'bx ) && ( instruction_prev[9] !== instruction_expected_prev[9] )
		&& ((instruction_expected_prev[9] !== last_instruction_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[9] = instruction_expected_prev[9];
	end
	if (
		( instruction_expected_prev[10] !== 1'bx ) && ( instruction_prev[10] !== instruction_expected_prev[10] )
		&& ((instruction_expected_prev[10] !== last_instruction_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[10] = instruction_expected_prev[10];
	end
	if (
		( instruction_expected_prev[11] !== 1'bx ) && ( instruction_prev[11] !== instruction_expected_prev[11] )
		&& ((instruction_expected_prev[11] !== last_instruction_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[11] = instruction_expected_prev[11];
	end
	if (
		( instruction_expected_prev[12] !== 1'bx ) && ( instruction_prev[12] !== instruction_expected_prev[12] )
		&& ((instruction_expected_prev[12] !== last_instruction_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[12] = instruction_expected_prev[12];
	end
	if (
		( instruction_expected_prev[13] !== 1'bx ) && ( instruction_prev[13] !== instruction_expected_prev[13] )
		&& ((instruction_expected_prev[13] !== last_instruction_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[13] = instruction_expected_prev[13];
	end
	if (
		( instruction_expected_prev[14] !== 1'bx ) && ( instruction_prev[14] !== instruction_expected_prev[14] )
		&& ((instruction_expected_prev[14] !== last_instruction_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[14] = instruction_expected_prev[14];
	end
	if (
		( instruction_expected_prev[15] !== 1'bx ) && ( instruction_prev[15] !== instruction_expected_prev[15] )
		&& ((instruction_expected_prev[15] !== last_instruction_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[15] = instruction_expected_prev[15];
	end
	if (
		( instruction_expected_prev[16] !== 1'bx ) && ( instruction_prev[16] !== instruction_expected_prev[16] )
		&& ((instruction_expected_prev[16] !== last_instruction_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[16] = instruction_expected_prev[16];
	end
	if (
		( instruction_expected_prev[17] !== 1'bx ) && ( instruction_prev[17] !== instruction_expected_prev[17] )
		&& ((instruction_expected_prev[17] !== last_instruction_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[17] = instruction_expected_prev[17];
	end
	if (
		( instruction_expected_prev[18] !== 1'bx ) && ( instruction_prev[18] !== instruction_expected_prev[18] )
		&& ((instruction_expected_prev[18] !== last_instruction_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[18] = instruction_expected_prev[18];
	end
	if (
		( instruction_expected_prev[19] !== 1'bx ) && ( instruction_prev[19] !== instruction_expected_prev[19] )
		&& ((instruction_expected_prev[19] !== last_instruction_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[19] = instruction_expected_prev[19];
	end
	if (
		( instruction_expected_prev[20] !== 1'bx ) && ( instruction_prev[20] !== instruction_expected_prev[20] )
		&& ((instruction_expected_prev[20] !== last_instruction_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[20] = instruction_expected_prev[20];
	end
	if (
		( instruction_expected_prev[21] !== 1'bx ) && ( instruction_prev[21] !== instruction_expected_prev[21] )
		&& ((instruction_expected_prev[21] !== last_instruction_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[21] = instruction_expected_prev[21];
	end
	if (
		( instruction_expected_prev[22] !== 1'bx ) && ( instruction_prev[22] !== instruction_expected_prev[22] )
		&& ((instruction_expected_prev[22] !== last_instruction_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[22] = instruction_expected_prev[22];
	end
	if (
		( instruction_expected_prev[23] !== 1'bx ) && ( instruction_prev[23] !== instruction_expected_prev[23] )
		&& ((instruction_expected_prev[23] !== last_instruction_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[23] = instruction_expected_prev[23];
	end
	if (
		( instruction_expected_prev[24] !== 1'bx ) && ( instruction_prev[24] !== instruction_expected_prev[24] )
		&& ((instruction_expected_prev[24] !== last_instruction_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[24] = instruction_expected_prev[24];
	end
	if (
		( instruction_expected_prev[25] !== 1'bx ) && ( instruction_prev[25] !== instruction_expected_prev[25] )
		&& ((instruction_expected_prev[25] !== last_instruction_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[25] = instruction_expected_prev[25];
	end
	if (
		( instruction_expected_prev[26] !== 1'bx ) && ( instruction_prev[26] !== instruction_expected_prev[26] )
		&& ((instruction_expected_prev[26] !== last_instruction_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[26] = instruction_expected_prev[26];
	end
	if (
		( instruction_expected_prev[27] !== 1'bx ) && ( instruction_prev[27] !== instruction_expected_prev[27] )
		&& ((instruction_expected_prev[27] !== last_instruction_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[27] = instruction_expected_prev[27];
	end
	if (
		( instruction_expected_prev[28] !== 1'bx ) && ( instruction_prev[28] !== instruction_expected_prev[28] )
		&& ((instruction_expected_prev[28] !== last_instruction_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[28] = instruction_expected_prev[28];
	end
	if (
		( instruction_expected_prev[29] !== 1'bx ) && ( instruction_prev[29] !== instruction_expected_prev[29] )
		&& ((instruction_expected_prev[29] !== last_instruction_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[29] = instruction_expected_prev[29];
	end
	if (
		( instruction_expected_prev[30] !== 1'bx ) && ( instruction_prev[30] !== instruction_expected_prev[30] )
		&& ((instruction_expected_prev[30] !== last_instruction_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[30] = instruction_expected_prev[30];
	end
	if (
		( instruction_expected_prev[31] !== 1'bx ) && ( instruction_prev[31] !== instruction_expected_prev[31] )
		&& ((instruction_expected_prev[31] !== last_instruction_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_instruction_exp[31] = instruction_expected_prev[31];
	end
	if (
		( IO_2_Reg_expected_prev !== 1'bx ) && ( IO_2_Reg_prev !== IO_2_Reg_expected_prev )
		&& ((IO_2_Reg_expected_prev !== last_IO_2_Reg_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_2_Reg :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_2_Reg_expected_prev);
		$display ("     Real value = %b", IO_2_Reg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IO_2_Reg_exp = IO_2_Reg_expected_prev;
	end
	if (
		( IO_OUT_expected_prev[0] !== 1'bx ) && ( IO_OUT_prev[0] !== IO_OUT_expected_prev[0] )
		&& ((IO_OUT_expected_prev[0] !== last_IO_OUT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[0] = IO_OUT_expected_prev[0];
	end
	if (
		( IO_OUT_expected_prev[1] !== 1'bx ) && ( IO_OUT_prev[1] !== IO_OUT_expected_prev[1] )
		&& ((IO_OUT_expected_prev[1] !== last_IO_OUT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[1] = IO_OUT_expected_prev[1];
	end
	if (
		( IO_OUT_expected_prev[2] !== 1'bx ) && ( IO_OUT_prev[2] !== IO_OUT_expected_prev[2] )
		&& ((IO_OUT_expected_prev[2] !== last_IO_OUT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[2] = IO_OUT_expected_prev[2];
	end
	if (
		( IO_OUT_expected_prev[3] !== 1'bx ) && ( IO_OUT_prev[3] !== IO_OUT_expected_prev[3] )
		&& ((IO_OUT_expected_prev[3] !== last_IO_OUT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[3] = IO_OUT_expected_prev[3];
	end
	if (
		( IO_OUT_expected_prev[4] !== 1'bx ) && ( IO_OUT_prev[4] !== IO_OUT_expected_prev[4] )
		&& ((IO_OUT_expected_prev[4] !== last_IO_OUT_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[4] = IO_OUT_expected_prev[4];
	end
	if (
		( IO_OUT_expected_prev[5] !== 1'bx ) && ( IO_OUT_prev[5] !== IO_OUT_expected_prev[5] )
		&& ((IO_OUT_expected_prev[5] !== last_IO_OUT_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[5] = IO_OUT_expected_prev[5];
	end
	if (
		( IO_OUT_expected_prev[6] !== 1'bx ) && ( IO_OUT_prev[6] !== IO_OUT_expected_prev[6] )
		&& ((IO_OUT_expected_prev[6] !== last_IO_OUT_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[6] = IO_OUT_expected_prev[6];
	end
	if (
		( IO_OUT_expected_prev[7] !== 1'bx ) && ( IO_OUT_prev[7] !== IO_OUT_expected_prev[7] )
		&& ((IO_OUT_expected_prev[7] !== last_IO_OUT_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[7] = IO_OUT_expected_prev[7];
	end
	if (
		( IO_OUT_expected_prev[8] !== 1'bx ) && ( IO_OUT_prev[8] !== IO_OUT_expected_prev[8] )
		&& ((IO_OUT_expected_prev[8] !== last_IO_OUT_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[8] = IO_OUT_expected_prev[8];
	end
	if (
		( IO_OUT_expected_prev[9] !== 1'bx ) && ( IO_OUT_prev[9] !== IO_OUT_expected_prev[9] )
		&& ((IO_OUT_expected_prev[9] !== last_IO_OUT_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[9] = IO_OUT_expected_prev[9];
	end
	if (
		( IO_OUT_expected_prev[10] !== 1'bx ) && ( IO_OUT_prev[10] !== IO_OUT_expected_prev[10] )
		&& ((IO_OUT_expected_prev[10] !== last_IO_OUT_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[10] = IO_OUT_expected_prev[10];
	end
	if (
		( IO_OUT_expected_prev[11] !== 1'bx ) && ( IO_OUT_prev[11] !== IO_OUT_expected_prev[11] )
		&& ((IO_OUT_expected_prev[11] !== last_IO_OUT_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[11] = IO_OUT_expected_prev[11];
	end
	if (
		( IO_OUT_expected_prev[12] !== 1'bx ) && ( IO_OUT_prev[12] !== IO_OUT_expected_prev[12] )
		&& ((IO_OUT_expected_prev[12] !== last_IO_OUT_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[12] = IO_OUT_expected_prev[12];
	end
	if (
		( IO_OUT_expected_prev[13] !== 1'bx ) && ( IO_OUT_prev[13] !== IO_OUT_expected_prev[13] )
		&& ((IO_OUT_expected_prev[13] !== last_IO_OUT_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[13] = IO_OUT_expected_prev[13];
	end
	if (
		( IO_OUT_expected_prev[14] !== 1'bx ) && ( IO_OUT_prev[14] !== IO_OUT_expected_prev[14] )
		&& ((IO_OUT_expected_prev[14] !== last_IO_OUT_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[14] = IO_OUT_expected_prev[14];
	end
	if (
		( IO_OUT_expected_prev[15] !== 1'bx ) && ( IO_OUT_prev[15] !== IO_OUT_expected_prev[15] )
		&& ((IO_OUT_expected_prev[15] !== last_IO_OUT_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[15] = IO_OUT_expected_prev[15];
	end
	if (
		( IO_OUT_expected_prev[16] !== 1'bx ) && ( IO_OUT_prev[16] !== IO_OUT_expected_prev[16] )
		&& ((IO_OUT_expected_prev[16] !== last_IO_OUT_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[16] = IO_OUT_expected_prev[16];
	end
	if (
		( IO_OUT_expected_prev[17] !== 1'bx ) && ( IO_OUT_prev[17] !== IO_OUT_expected_prev[17] )
		&& ((IO_OUT_expected_prev[17] !== last_IO_OUT_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[17] = IO_OUT_expected_prev[17];
	end
	if (
		( IO_OUT_expected_prev[18] !== 1'bx ) && ( IO_OUT_prev[18] !== IO_OUT_expected_prev[18] )
		&& ((IO_OUT_expected_prev[18] !== last_IO_OUT_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[18] = IO_OUT_expected_prev[18];
	end
	if (
		( IO_OUT_expected_prev[19] !== 1'bx ) && ( IO_OUT_prev[19] !== IO_OUT_expected_prev[19] )
		&& ((IO_OUT_expected_prev[19] !== last_IO_OUT_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[19] = IO_OUT_expected_prev[19];
	end
	if (
		( IO_OUT_expected_prev[20] !== 1'bx ) && ( IO_OUT_prev[20] !== IO_OUT_expected_prev[20] )
		&& ((IO_OUT_expected_prev[20] !== last_IO_OUT_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[20] = IO_OUT_expected_prev[20];
	end
	if (
		( IO_OUT_expected_prev[21] !== 1'bx ) && ( IO_OUT_prev[21] !== IO_OUT_expected_prev[21] )
		&& ((IO_OUT_expected_prev[21] !== last_IO_OUT_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[21] = IO_OUT_expected_prev[21];
	end
	if (
		( IO_OUT_expected_prev[22] !== 1'bx ) && ( IO_OUT_prev[22] !== IO_OUT_expected_prev[22] )
		&& ((IO_OUT_expected_prev[22] !== last_IO_OUT_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[22] = IO_OUT_expected_prev[22];
	end
	if (
		( IO_OUT_expected_prev[23] !== 1'bx ) && ( IO_OUT_prev[23] !== IO_OUT_expected_prev[23] )
		&& ((IO_OUT_expected_prev[23] !== last_IO_OUT_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[23] = IO_OUT_expected_prev[23];
	end
	if (
		( IO_OUT_expected_prev[24] !== 1'bx ) && ( IO_OUT_prev[24] !== IO_OUT_expected_prev[24] )
		&& ((IO_OUT_expected_prev[24] !== last_IO_OUT_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[24] = IO_OUT_expected_prev[24];
	end
	if (
		( IO_OUT_expected_prev[25] !== 1'bx ) && ( IO_OUT_prev[25] !== IO_OUT_expected_prev[25] )
		&& ((IO_OUT_expected_prev[25] !== last_IO_OUT_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[25] = IO_OUT_expected_prev[25];
	end
	if (
		( IO_OUT_expected_prev[26] !== 1'bx ) && ( IO_OUT_prev[26] !== IO_OUT_expected_prev[26] )
		&& ((IO_OUT_expected_prev[26] !== last_IO_OUT_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[26] = IO_OUT_expected_prev[26];
	end
	if (
		( IO_OUT_expected_prev[27] !== 1'bx ) && ( IO_OUT_prev[27] !== IO_OUT_expected_prev[27] )
		&& ((IO_OUT_expected_prev[27] !== last_IO_OUT_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[27] = IO_OUT_expected_prev[27];
	end
	if (
		( IO_OUT_expected_prev[28] !== 1'bx ) && ( IO_OUT_prev[28] !== IO_OUT_expected_prev[28] )
		&& ((IO_OUT_expected_prev[28] !== last_IO_OUT_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[28] = IO_OUT_expected_prev[28];
	end
	if (
		( IO_OUT_expected_prev[29] !== 1'bx ) && ( IO_OUT_prev[29] !== IO_OUT_expected_prev[29] )
		&& ((IO_OUT_expected_prev[29] !== last_IO_OUT_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[29] = IO_OUT_expected_prev[29];
	end
	if (
		( IO_OUT_expected_prev[30] !== 1'bx ) && ( IO_OUT_prev[30] !== IO_OUT_expected_prev[30] )
		&& ((IO_OUT_expected_prev[30] !== last_IO_OUT_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[30] = IO_OUT_expected_prev[30];
	end
	if (
		( IO_OUT_expected_prev[31] !== 1'bx ) && ( IO_OUT_prev[31] !== IO_OUT_expected_prev[31] )
		&& ((IO_OUT_expected_prev[31] !== last_IO_OUT_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_OUT_expected_prev);
		$display ("     Real value = %b", IO_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_IO_OUT_exp[31] = IO_OUT_expected_prev[31];
	end
	if (
		( IR_Ld_expected_prev !== 1'bx ) && ( IR_Ld_prev !== IR_Ld_expected_prev )
		&& ((IR_Ld_expected_prev !== last_IR_Ld_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_Ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_Ld_expected_prev);
		$display ("     Real value = %b", IR_Ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_IR_Ld_exp = IR_Ld_expected_prev;
	end
	if (
		( Pc_Inc_expected_prev !== 1'bx ) && ( Pc_Inc_prev !== Pc_Inc_expected_prev )
		&& ((Pc_Inc_expected_prev !== last_Pc_Inc_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pc_Inc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pc_Inc_expected_prev);
		$display ("     Real value = %b", Pc_Inc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Pc_Inc_exp = Pc_Inc_expected_prev;
	end
	if (
		( Pc_Ld_expected_prev !== 1'bx ) && ( Pc_Ld_prev !== Pc_Ld_expected_prev )
		&& ((Pc_Ld_expected_prev !== last_Pc_Ld_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Pc_Ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Pc_Ld_expected_prev);
		$display ("     Real value = %b", Pc_Ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Pc_Ld_exp = Pc_Ld_expected_prev;
	end
	if (
		( PC_Ld_En_expected_prev !== 1'bx ) && ( PC_Ld_En_prev !== PC_Ld_En_expected_prev )
		&& ((PC_Ld_En_expected_prev !== last_PC_Ld_En_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_Ld_En :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_Ld_En_expected_prev);
		$display ("     Real value = %b", PC_Ld_En_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_PC_Ld_En_exp = PC_Ld_En_expected_prev;
	end
	if (
		( Reg_2_IO_expected_prev !== 1'bx ) && ( Reg_2_IO_prev !== Reg_2_IO_expected_prev )
		&& ((Reg_2_IO_expected_prev !== last_Reg_2_IO_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_2_IO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_2_IO_expected_prev);
		$display ("     Real value = %b", Reg_2_IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Reg_2_IO_exp = Reg_2_IO_expected_prev;
	end
	if (
		( Reg_Wr_expected_prev !== 1'bx ) && ( Reg_Wr_prev !== Reg_Wr_expected_prev )
		&& ((Reg_Wr_expected_prev !== last_Reg_Wr_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Wr_expected_prev);
		$display ("     Real value = %b", Reg_Wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Reg_Wr_exp = Reg_Wr_expected_prev;
	end
	if (
		( RSource1_expected_prev[0] !== 1'bx ) && ( RSource1_prev[0] !== RSource1_expected_prev[0] )
		&& ((RSource1_expected_prev[0] !== last_RSource1_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[0] = RSource1_expected_prev[0];
	end
	if (
		( RSource1_expected_prev[1] !== 1'bx ) && ( RSource1_prev[1] !== RSource1_expected_prev[1] )
		&& ((RSource1_expected_prev[1] !== last_RSource1_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[1] = RSource1_expected_prev[1];
	end
	if (
		( RSource1_expected_prev[2] !== 1'bx ) && ( RSource1_prev[2] !== RSource1_expected_prev[2] )
		&& ((RSource1_expected_prev[2] !== last_RSource1_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[2] = RSource1_expected_prev[2];
	end
	if (
		( RSource1_expected_prev[3] !== 1'bx ) && ( RSource1_prev[3] !== RSource1_expected_prev[3] )
		&& ((RSource1_expected_prev[3] !== last_RSource1_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[3] = RSource1_expected_prev[3];
	end
	if (
		( RSource1_expected_prev[4] !== 1'bx ) && ( RSource1_prev[4] !== RSource1_expected_prev[4] )
		&& ((RSource1_expected_prev[4] !== last_RSource1_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[4] = RSource1_expected_prev[4];
	end
	if (
		( RSource1_expected_prev[5] !== 1'bx ) && ( RSource1_prev[5] !== RSource1_expected_prev[5] )
		&& ((RSource1_expected_prev[5] !== last_RSource1_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[5] = RSource1_expected_prev[5];
	end
	if (
		( RSource1_expected_prev[6] !== 1'bx ) && ( RSource1_prev[6] !== RSource1_expected_prev[6] )
		&& ((RSource1_expected_prev[6] !== last_RSource1_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[6] = RSource1_expected_prev[6];
	end
	if (
		( RSource1_expected_prev[7] !== 1'bx ) && ( RSource1_prev[7] !== RSource1_expected_prev[7] )
		&& ((RSource1_expected_prev[7] !== last_RSource1_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[7] = RSource1_expected_prev[7];
	end
	if (
		( RSource1_expected_prev[8] !== 1'bx ) && ( RSource1_prev[8] !== RSource1_expected_prev[8] )
		&& ((RSource1_expected_prev[8] !== last_RSource1_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[8] = RSource1_expected_prev[8];
	end
	if (
		( RSource1_expected_prev[9] !== 1'bx ) && ( RSource1_prev[9] !== RSource1_expected_prev[9] )
		&& ((RSource1_expected_prev[9] !== last_RSource1_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[9] = RSource1_expected_prev[9];
	end
	if (
		( RSource1_expected_prev[10] !== 1'bx ) && ( RSource1_prev[10] !== RSource1_expected_prev[10] )
		&& ((RSource1_expected_prev[10] !== last_RSource1_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[10] = RSource1_expected_prev[10];
	end
	if (
		( RSource1_expected_prev[11] !== 1'bx ) && ( RSource1_prev[11] !== RSource1_expected_prev[11] )
		&& ((RSource1_expected_prev[11] !== last_RSource1_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[11] = RSource1_expected_prev[11];
	end
	if (
		( RSource1_expected_prev[12] !== 1'bx ) && ( RSource1_prev[12] !== RSource1_expected_prev[12] )
		&& ((RSource1_expected_prev[12] !== last_RSource1_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[12] = RSource1_expected_prev[12];
	end
	if (
		( RSource1_expected_prev[13] !== 1'bx ) && ( RSource1_prev[13] !== RSource1_expected_prev[13] )
		&& ((RSource1_expected_prev[13] !== last_RSource1_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[13] = RSource1_expected_prev[13];
	end
	if (
		( RSource1_expected_prev[14] !== 1'bx ) && ( RSource1_prev[14] !== RSource1_expected_prev[14] )
		&& ((RSource1_expected_prev[14] !== last_RSource1_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[14] = RSource1_expected_prev[14];
	end
	if (
		( RSource1_expected_prev[15] !== 1'bx ) && ( RSource1_prev[15] !== RSource1_expected_prev[15] )
		&& ((RSource1_expected_prev[15] !== last_RSource1_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[15] = RSource1_expected_prev[15];
	end
	if (
		( RSource1_expected_prev[16] !== 1'bx ) && ( RSource1_prev[16] !== RSource1_expected_prev[16] )
		&& ((RSource1_expected_prev[16] !== last_RSource1_exp[16]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[16] = RSource1_expected_prev[16];
	end
	if (
		( RSource1_expected_prev[17] !== 1'bx ) && ( RSource1_prev[17] !== RSource1_expected_prev[17] )
		&& ((RSource1_expected_prev[17] !== last_RSource1_exp[17]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[17] = RSource1_expected_prev[17];
	end
	if (
		( RSource1_expected_prev[18] !== 1'bx ) && ( RSource1_prev[18] !== RSource1_expected_prev[18] )
		&& ((RSource1_expected_prev[18] !== last_RSource1_exp[18]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[18] = RSource1_expected_prev[18];
	end
	if (
		( RSource1_expected_prev[19] !== 1'bx ) && ( RSource1_prev[19] !== RSource1_expected_prev[19] )
		&& ((RSource1_expected_prev[19] !== last_RSource1_exp[19]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[19] = RSource1_expected_prev[19];
	end
	if (
		( RSource1_expected_prev[20] !== 1'bx ) && ( RSource1_prev[20] !== RSource1_expected_prev[20] )
		&& ((RSource1_expected_prev[20] !== last_RSource1_exp[20]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[20] = RSource1_expected_prev[20];
	end
	if (
		( RSource1_expected_prev[21] !== 1'bx ) && ( RSource1_prev[21] !== RSource1_expected_prev[21] )
		&& ((RSource1_expected_prev[21] !== last_RSource1_exp[21]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[21] = RSource1_expected_prev[21];
	end
	if (
		( RSource1_expected_prev[22] !== 1'bx ) && ( RSource1_prev[22] !== RSource1_expected_prev[22] )
		&& ((RSource1_expected_prev[22] !== last_RSource1_exp[22]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[22] = RSource1_expected_prev[22];
	end
	if (
		( RSource1_expected_prev[23] !== 1'bx ) && ( RSource1_prev[23] !== RSource1_expected_prev[23] )
		&& ((RSource1_expected_prev[23] !== last_RSource1_exp[23]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[23] = RSource1_expected_prev[23];
	end
	if (
		( RSource1_expected_prev[24] !== 1'bx ) && ( RSource1_prev[24] !== RSource1_expected_prev[24] )
		&& ((RSource1_expected_prev[24] !== last_RSource1_exp[24]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[24] = RSource1_expected_prev[24];
	end
	if (
		( RSource1_expected_prev[25] !== 1'bx ) && ( RSource1_prev[25] !== RSource1_expected_prev[25] )
		&& ((RSource1_expected_prev[25] !== last_RSource1_exp[25]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[25] = RSource1_expected_prev[25];
	end
	if (
		( RSource1_expected_prev[26] !== 1'bx ) && ( RSource1_prev[26] !== RSource1_expected_prev[26] )
		&& ((RSource1_expected_prev[26] !== last_RSource1_exp[26]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[26] = RSource1_expected_prev[26];
	end
	if (
		( RSource1_expected_prev[27] !== 1'bx ) && ( RSource1_prev[27] !== RSource1_expected_prev[27] )
		&& ((RSource1_expected_prev[27] !== last_RSource1_exp[27]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[27] = RSource1_expected_prev[27];
	end
	if (
		( RSource1_expected_prev[28] !== 1'bx ) && ( RSource1_prev[28] !== RSource1_expected_prev[28] )
		&& ((RSource1_expected_prev[28] !== last_RSource1_exp[28]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[28] = RSource1_expected_prev[28];
	end
	if (
		( RSource1_expected_prev[29] !== 1'bx ) && ( RSource1_prev[29] !== RSource1_expected_prev[29] )
		&& ((RSource1_expected_prev[29] !== last_RSource1_exp[29]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[29] = RSource1_expected_prev[29];
	end
	if (
		( RSource1_expected_prev[30] !== 1'bx ) && ( RSource1_prev[30] !== RSource1_expected_prev[30] )
		&& ((RSource1_expected_prev[30] !== last_RSource1_exp[30]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[30] = RSource1_expected_prev[30];
	end
	if (
		( RSource1_expected_prev[31] !== 1'bx ) && ( RSource1_prev[31] !== RSource1_expected_prev[31] )
		&& ((RSource1_expected_prev[31] !== last_RSource1_exp[31]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource1_expected_prev);
		$display ("     Real value = %b", RSource1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RSource1_exp[31] = RSource1_expected_prev[31];
	end
	if (
		( RSource2_expected_prev[0] !== 1'bx ) && ( RSource2_prev[0] !== RSource2_expected_prev[0] )
		&& ((RSource2_expected_prev[0] !== last_RSource2_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[0] = RSource2_expected_prev[0];
	end
	if (
		( RSource2_expected_prev[1] !== 1'bx ) && ( RSource2_prev[1] !== RSource2_expected_prev[1] )
		&& ((RSource2_expected_prev[1] !== last_RSource2_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[1] = RSource2_expected_prev[1];
	end
	if (
		( RSource2_expected_prev[2] !== 1'bx ) && ( RSource2_prev[2] !== RSource2_expected_prev[2] )
		&& ((RSource2_expected_prev[2] !== last_RSource2_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[2] = RSource2_expected_prev[2];
	end
	if (
		( RSource2_expected_prev[3] !== 1'bx ) && ( RSource2_prev[3] !== RSource2_expected_prev[3] )
		&& ((RSource2_expected_prev[3] !== last_RSource2_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[3] = RSource2_expected_prev[3];
	end
	if (
		( RSource2_expected_prev[4] !== 1'bx ) && ( RSource2_prev[4] !== RSource2_expected_prev[4] )
		&& ((RSource2_expected_prev[4] !== last_RSource2_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[4] = RSource2_expected_prev[4];
	end
	if (
		( RSource2_expected_prev[5] !== 1'bx ) && ( RSource2_prev[5] !== RSource2_expected_prev[5] )
		&& ((RSource2_expected_prev[5] !== last_RSource2_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[5] = RSource2_expected_prev[5];
	end
	if (
		( RSource2_expected_prev[6] !== 1'bx ) && ( RSource2_prev[6] !== RSource2_expected_prev[6] )
		&& ((RSource2_expected_prev[6] !== last_RSource2_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[6] = RSource2_expected_prev[6];
	end
	if (
		( RSource2_expected_prev[7] !== 1'bx ) && ( RSource2_prev[7] !== RSource2_expected_prev[7] )
		&& ((RSource2_expected_prev[7] !== last_RSource2_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[7] = RSource2_expected_prev[7];
	end
	if (
		( RSource2_expected_prev[8] !== 1'bx ) && ( RSource2_prev[8] !== RSource2_expected_prev[8] )
		&& ((RSource2_expected_prev[8] !== last_RSource2_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[8] = RSource2_expected_prev[8];
	end
	if (
		( RSource2_expected_prev[9] !== 1'bx ) && ( RSource2_prev[9] !== RSource2_expected_prev[9] )
		&& ((RSource2_expected_prev[9] !== last_RSource2_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[9] = RSource2_expected_prev[9];
	end
	if (
		( RSource2_expected_prev[10] !== 1'bx ) && ( RSource2_prev[10] !== RSource2_expected_prev[10] )
		&& ((RSource2_expected_prev[10] !== last_RSource2_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[10] = RSource2_expected_prev[10];
	end
	if (
		( RSource2_expected_prev[11] !== 1'bx ) && ( RSource2_prev[11] !== RSource2_expected_prev[11] )
		&& ((RSource2_expected_prev[11] !== last_RSource2_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[11] = RSource2_expected_prev[11];
	end
	if (
		( RSource2_expected_prev[12] !== 1'bx ) && ( RSource2_prev[12] !== RSource2_expected_prev[12] )
		&& ((RSource2_expected_prev[12] !== last_RSource2_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[12] = RSource2_expected_prev[12];
	end
	if (
		( RSource2_expected_prev[13] !== 1'bx ) && ( RSource2_prev[13] !== RSource2_expected_prev[13] )
		&& ((RSource2_expected_prev[13] !== last_RSource2_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[13] = RSource2_expected_prev[13];
	end
	if (
		( RSource2_expected_prev[14] !== 1'bx ) && ( RSource2_prev[14] !== RSource2_expected_prev[14] )
		&& ((RSource2_expected_prev[14] !== last_RSource2_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[14] = RSource2_expected_prev[14];
	end
	if (
		( RSource2_expected_prev[15] !== 1'bx ) && ( RSource2_prev[15] !== RSource2_expected_prev[15] )
		&& ((RSource2_expected_prev[15] !== last_RSource2_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[15] = RSource2_expected_prev[15];
	end
	if (
		( RSource2_expected_prev[16] !== 1'bx ) && ( RSource2_prev[16] !== RSource2_expected_prev[16] )
		&& ((RSource2_expected_prev[16] !== last_RSource2_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[16] = RSource2_expected_prev[16];
	end
	if (
		( RSource2_expected_prev[17] !== 1'bx ) && ( RSource2_prev[17] !== RSource2_expected_prev[17] )
		&& ((RSource2_expected_prev[17] !== last_RSource2_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[17] = RSource2_expected_prev[17];
	end
	if (
		( RSource2_expected_prev[18] !== 1'bx ) && ( RSource2_prev[18] !== RSource2_expected_prev[18] )
		&& ((RSource2_expected_prev[18] !== last_RSource2_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[18] = RSource2_expected_prev[18];
	end
	if (
		( RSource2_expected_prev[19] !== 1'bx ) && ( RSource2_prev[19] !== RSource2_expected_prev[19] )
		&& ((RSource2_expected_prev[19] !== last_RSource2_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[19] = RSource2_expected_prev[19];
	end
	if (
		( RSource2_expected_prev[20] !== 1'bx ) && ( RSource2_prev[20] !== RSource2_expected_prev[20] )
		&& ((RSource2_expected_prev[20] !== last_RSource2_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[20] = RSource2_expected_prev[20];
	end
	if (
		( RSource2_expected_prev[21] !== 1'bx ) && ( RSource2_prev[21] !== RSource2_expected_prev[21] )
		&& ((RSource2_expected_prev[21] !== last_RSource2_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[21] = RSource2_expected_prev[21];
	end
	if (
		( RSource2_expected_prev[22] !== 1'bx ) && ( RSource2_prev[22] !== RSource2_expected_prev[22] )
		&& ((RSource2_expected_prev[22] !== last_RSource2_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[22] = RSource2_expected_prev[22];
	end
	if (
		( RSource2_expected_prev[23] !== 1'bx ) && ( RSource2_prev[23] !== RSource2_expected_prev[23] )
		&& ((RSource2_expected_prev[23] !== last_RSource2_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[23] = RSource2_expected_prev[23];
	end
	if (
		( RSource2_expected_prev[24] !== 1'bx ) && ( RSource2_prev[24] !== RSource2_expected_prev[24] )
		&& ((RSource2_expected_prev[24] !== last_RSource2_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[24] = RSource2_expected_prev[24];
	end
	if (
		( RSource2_expected_prev[25] !== 1'bx ) && ( RSource2_prev[25] !== RSource2_expected_prev[25] )
		&& ((RSource2_expected_prev[25] !== last_RSource2_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[25] = RSource2_expected_prev[25];
	end
	if (
		( RSource2_expected_prev[26] !== 1'bx ) && ( RSource2_prev[26] !== RSource2_expected_prev[26] )
		&& ((RSource2_expected_prev[26] !== last_RSource2_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[26] = RSource2_expected_prev[26];
	end
	if (
		( RSource2_expected_prev[27] !== 1'bx ) && ( RSource2_prev[27] !== RSource2_expected_prev[27] )
		&& ((RSource2_expected_prev[27] !== last_RSource2_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[27] = RSource2_expected_prev[27];
	end
	if (
		( RSource2_expected_prev[28] !== 1'bx ) && ( RSource2_prev[28] !== RSource2_expected_prev[28] )
		&& ((RSource2_expected_prev[28] !== last_RSource2_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[28] = RSource2_expected_prev[28];
	end
	if (
		( RSource2_expected_prev[29] !== 1'bx ) && ( RSource2_prev[29] !== RSource2_expected_prev[29] )
		&& ((RSource2_expected_prev[29] !== last_RSource2_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[29] = RSource2_expected_prev[29];
	end
	if (
		( RSource2_expected_prev[30] !== 1'bx ) && ( RSource2_prev[30] !== RSource2_expected_prev[30] )
		&& ((RSource2_expected_prev[30] !== last_RSource2_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[30] = RSource2_expected_prev[30];
	end
	if (
		( RSource2_expected_prev[31] !== 1'bx ) && ( RSource2_prev[31] !== RSource2_expected_prev[31] )
		&& ((RSource2_expected_prev[31] !== last_RSource2_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RSource2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RSource2_expected_prev);
		$display ("     Real value = %b", RSource2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RSource2_exp[31] = RSource2_expected_prev[31];
	end
	if (
		( stat_CVNZ_expected_prev[0] !== 1'bx ) && ( stat_CVNZ_prev[0] !== stat_CVNZ_expected_prev[0] )
		&& ((stat_CVNZ_expected_prev[0] !== last_stat_CVNZ_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stat_CVNZ[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stat_CVNZ_expected_prev);
		$display ("     Real value = %b", stat_CVNZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_stat_CVNZ_exp[0] = stat_CVNZ_expected_prev[0];
	end
	if (
		( stat_CVNZ_expected_prev[1] !== 1'bx ) && ( stat_CVNZ_prev[1] !== stat_CVNZ_expected_prev[1] )
		&& ((stat_CVNZ_expected_prev[1] !== last_stat_CVNZ_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stat_CVNZ[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stat_CVNZ_expected_prev);
		$display ("     Real value = %b", stat_CVNZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_stat_CVNZ_exp[1] = stat_CVNZ_expected_prev[1];
	end
	if (
		( stat_CVNZ_expected_prev[2] !== 1'bx ) && ( stat_CVNZ_prev[2] !== stat_CVNZ_expected_prev[2] )
		&& ((stat_CVNZ_expected_prev[2] !== last_stat_CVNZ_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stat_CVNZ[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stat_CVNZ_expected_prev);
		$display ("     Real value = %b", stat_CVNZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_stat_CVNZ_exp[2] = stat_CVNZ_expected_prev[2];
	end
	if (
		( stat_CVNZ_expected_prev[3] !== 1'bx ) && ( stat_CVNZ_prev[3] !== stat_CVNZ_expected_prev[3] )
		&& ((stat_CVNZ_expected_prev[3] !== last_stat_CVNZ_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port stat_CVNZ[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", stat_CVNZ_expected_prev);
		$display ("     Real value = %b", stat_CVNZ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_stat_CVNZ_exp[3] = stat_CVNZ_expected_prev[3];
	end
	if (
		( Stat_Wr_expected_prev !== 1'bx ) && ( Stat_Wr_prev !== Stat_Wr_expected_prev )
		&& ((Stat_Wr_expected_prev !== last_Stat_Wr_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Stat_Wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Stat_Wr_expected_prev);
		$display ("     Real value = %b", Stat_Wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_Stat_Wr_exp = Stat_Wr_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [31:0] IO_IN;
reg reset;
// wires                                               
wire ALU_2_DBus;
wire [31:0] DBus;
wire DM_2_DBus;
wire DM_Rd;
wire DM_Wr;
wire [31:0] IM_address;
wire [31:0] IM_instruction_out;
wire [31:0] instruction;
wire IO_2_Reg;
wire [31:0] IO_OUT;
wire IR_Ld;
wire Pc_Inc;
wire Pc_Ld;
wire PC_Ld_En;
wire Reg_2_IO;
wire Reg_Wr;
wire [31:0] RSource1;
wire [31:0] RSource2;
wire [3:0] stat_CVNZ;
wire Stat_Wr;

wire sampler;                             

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.ALU_2_DBus(ALU_2_DBus),
	.clock(clock),
	.DBus(DBus),
	.DM_2_DBus(DM_2_DBus),
	.DM_Rd(DM_Rd),
	.DM_Wr(DM_Wr),
	.IM_address(IM_address),
	.IM_instruction_out(IM_instruction_out),
	.instruction(instruction),
	.IO_2_Reg(IO_2_Reg),
	.IO_IN(IO_IN),
	.IO_OUT(IO_OUT),
	.IR_Ld(IR_Ld),
	.Pc_Inc(Pc_Inc),
	.Pc_Ld(Pc_Ld),
	.PC_Ld_En(PC_Ld_En),
	.Reg_2_IO(Reg_2_IO),
	.Reg_Wr(Reg_Wr),
	.reset(reset),
	.RSource1(RSource1),
	.RSource2(RSource2),
	.stat_CVNZ(stat_CVNZ),
	.Stat_Wr(Stat_Wr)
);

// clock
always
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	#500000;
end 
// IO_IN[ 31 ]
initial
begin
	IO_IN[31] = 1'b0;
end 
// IO_IN[ 30 ]
initial
begin
	IO_IN[30] = 1'b0;
end 
// IO_IN[ 29 ]
initial
begin
	IO_IN[29] = 1'b0;
end 
// IO_IN[ 28 ]
initial
begin
	IO_IN[28] = 1'b0;
end 
// IO_IN[ 27 ]
initial
begin
	IO_IN[27] = 1'b0;
end 
// IO_IN[ 26 ]
initial
begin
	IO_IN[26] = 1'b0;
end 
// IO_IN[ 25 ]
initial
begin
	IO_IN[25] = 1'b0;
end 
// IO_IN[ 24 ]
initial
begin
	IO_IN[24] = 1'b0;
end 
// IO_IN[ 23 ]
initial
begin
	IO_IN[23] = 1'b0;
end 
// IO_IN[ 22 ]
initial
begin
	IO_IN[22] = 1'b0;
end 
// IO_IN[ 21 ]
initial
begin
	IO_IN[21] = 1'b0;
end 
// IO_IN[ 20 ]
initial
begin
	IO_IN[20] = 1'b0;
end 
// IO_IN[ 19 ]
initial
begin
	IO_IN[19] = 1'b0;
end 
// IO_IN[ 18 ]
initial
begin
	IO_IN[18] = 1'b0;
end 
// IO_IN[ 17 ]
initial
begin
	IO_IN[17] = 1'b0;
end 
// IO_IN[ 16 ]
initial
begin
	IO_IN[16] = 1'b0;
end 
// IO_IN[ 15 ]
initial
begin
	IO_IN[15] = 1'b0;
end 
// IO_IN[ 14 ]
initial
begin
	IO_IN[14] = 1'b0;
end 
// IO_IN[ 13 ]
initial
begin
	IO_IN[13] = 1'b0;
end 
// IO_IN[ 12 ]
initial
begin
	IO_IN[12] = 1'b0;
end 
// IO_IN[ 11 ]
initial
begin
	IO_IN[11] = 1'b0;
end 
// IO_IN[ 10 ]
initial
begin
	IO_IN[10] = 1'b0;
end 
// IO_IN[ 9 ]
initial
begin
	IO_IN[9] = 1'b0;
end 
// IO_IN[ 8 ]
initial
begin
	IO_IN[8] = 1'b0;
end 
// IO_IN[ 7 ]
initial
begin
	IO_IN[7] = 1'b0;
end 
// IO_IN[ 6 ]
initial
begin
	IO_IN[6] = 1'b0;
	IO_IN[6] = #11520000 1'b1;
	IO_IN[6] = #3520000 1'b0;
	IO_IN[6] = #43840000 1'b1;
	IO_IN[6] = #3520000 1'b0;
end 
// IO_IN[ 5 ]
initial
begin
	IO_IN[5] = 1'b0;
end 
// IO_IN[ 4 ]
initial
begin
	IO_IN[4] = 1'b0;
end 
// IO_IN[ 3 ]
initial
begin
	IO_IN[3] = 1'b1;
	IO_IN[3] = #4480000 1'b0;
	IO_IN[3] = #42880000 1'b1;
	IO_IN[3] = #4480000 1'b0;
end 
// IO_IN[ 2 ]
initial
begin
	IO_IN[2] = 1'b0;
end 
// IO_IN[ 1 ]
initial
begin
	IO_IN[1] = 1'b0;
end 
// IO_IN[ 0 ]
initial
begin
	IO_IN[0] = 1'b0;
	IO_IN[0] = #7360000 1'b1;
	IO_IN[0] = #4160000 1'b0;
	IO_IN[0] = #43200000 1'b1;
	IO_IN[0] = #4160000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #160000 1'b0;
	reset = #44640000 1'b1;
	reset = #2560000 1'b0;
end 

processor_vlg_sample_tst tb_sample (
	.clock(clock),
	.IO_IN(IO_IN),
	.reset(reset),
	.sampler_tx(sampler)
);

processor_vlg_check_tst tb_out(
	.ALU_2_DBus(ALU_2_DBus),
	.DBus(DBus),
	.DM_2_DBus(DM_2_DBus),
	.DM_Rd(DM_Rd),
	.DM_Wr(DM_Wr),
	.IM_address(IM_address),
	.IM_instruction_out(IM_instruction_out),
	.instruction(instruction),
	.IO_2_Reg(IO_2_Reg),
	.IO_OUT(IO_OUT),
	.IR_Ld(IR_Ld),
	.Pc_Inc(Pc_Inc),
	.Pc_Ld(Pc_Ld),
	.PC_Ld_En(PC_Ld_En),
	.Reg_2_IO(Reg_2_IO),
	.Reg_Wr(Reg_Wr),
	.RSource1(RSource1),
	.RSource2(RSource2),
	.stat_CVNZ(stat_CVNZ),
	.Stat_Wr(Stat_Wr),
	.sampler_rx(sampler)
);
endmodule

